"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktodo_list"] = self["webpackChunktodo_list"] || []).push([["vendors-node_modules_oddbird_css-anchor-positioning_dist_css-anchor-positioning-fn_js"],{

/***/ "./node_modules/@oddbird/css-anchor-positioning/dist/css-anchor-positioning-fn.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@oddbird/css-anchor-positioning/dist/css-anchor-positioning-fn.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ nd)\n/* harmony export */ });\nvar ko = Object.defineProperty, So = Object.defineProperties;\nvar yo = Object.getOwnPropertyDescriptors;\nvar En = Object.getOwnPropertySymbols;\nvar bo = Object.prototype.hasOwnProperty, xo = Object.prototype.propertyIsEnumerable;\nvar $n = (t, e, n) => e in t ? ko(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n, U = (t, e) => {\n  for (var n in e || (e = {}))\n    bo.call(e, n) && $n(t, n, e[n]);\n  if (En)\n    for (var n of En(e))\n      xo.call(e, n) && $n(t, n, e[n]);\n  return t;\n}, q = (t, e) => So(t, yo(e));\nvar R = (t, e, n) => new Promise((s, r) => {\n  var o = (u) => {\n    try {\n      l(n.next(u));\n    } catch (i) {\n      r(i);\n    }\n  }, a = (u) => {\n    try {\n      l(n.throw(u));\n    } catch (i) {\n      r(i);\n    }\n  }, l = (u) => u.done ? s(u.value) : Promise.resolve(u.value).then(o, a);\n  l((n = n.apply(t, e)).next());\n});\nconst nn = Math.min, Gt = Math.max, Te = Math.round, pe = Math.floor, St = (t) => ({\n  x: t,\n  y: t\n});\nfunction Co(t, e) {\n  return typeof t == \"function\" ? t(e) : t;\n}\nfunction wo(t) {\n  return U({\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }, t);\n}\nfunction To(t) {\n  return typeof t != \"number\" ? wo(t) : {\n    top: t,\n    right: t,\n    bottom: t,\n    left: t\n  };\n}\nfunction Ae(t) {\n  const {\n    x: e,\n    y: n,\n    width: s,\n    height: r\n  } = t;\n  return {\n    width: s,\n    height: r,\n    top: n,\n    left: e,\n    right: e + s,\n    bottom: n + r,\n    x: e,\n    y: n\n  };\n}\nfunction Ao(t, e) {\n  return R(this, null, function* () {\n    var n;\n    e === void 0 && (e = {});\n    const {\n      x: s,\n      y: r,\n      platform: o,\n      rects: a,\n      elements: l,\n      strategy: u\n    } = t, {\n      boundary: i = \"clippingAncestors\",\n      rootBoundary: c = \"viewport\",\n      elementContext: h = \"floating\",\n      altBoundary: f = !1,\n      padding: p = 0\n    } = Co(e, t), d = To(p), k = l[f ? h === \"floating\" ? \"reference\" : \"floating\" : h], y = Ae(yield o.getClippingRect({\n      element: (n = yield o.isElement == null ? void 0 : o.isElement(k)) == null || n ? k : k.contextElement || (yield o.getDocumentElement == null ? void 0 : o.getDocumentElement(l.floating)),\n      boundary: i,\n      rootBoundary: c,\n      strategy: u\n    })), x = h === \"floating\" ? {\n      x: s,\n      y: r,\n      width: a.floating.width,\n      height: a.floating.height\n    } : a.reference, A = yield o.getOffsetParent == null ? void 0 : o.getOffsetParent(l.floating), M = (yield o.isElement == null ? void 0 : o.isElement(A)) ? (yield o.getScale == null ? void 0 : o.getScale(A)) || {\n      x: 1,\n      y: 1\n    } : {\n      x: 1,\n      y: 1\n    }, et = Ae(o.convertOffsetParentRelativeRectToViewportRelativeRect ? yield o.convertOffsetParentRelativeRectToViewportRelativeRect({\n      elements: l,\n      rect: x,\n      offsetParent: A,\n      strategy: u\n    }) : x);\n    return {\n      top: (y.top - et.top + d.top) / M.y,\n      bottom: (et.bottom - y.bottom + d.bottom) / M.y,\n      left: (y.left - et.left + d.left) / M.x,\n      right: (et.right - y.right + d.right) / M.x\n    };\n  });\n}\nfunction Re() {\n  return typeof window != \"undefined\";\n}\nfunction te(t) {\n  return Is(t) ? (t.nodeName || \"\").toLowerCase() : \"#document\";\n}\nfunction it(t) {\n  var e;\n  return (t == null || (e = t.ownerDocument) == null ? void 0 : e.defaultView) || window;\n}\nfunction bt(t) {\n  var e;\n  return (e = (Is(t) ? t.ownerDocument : t.document) || window.document) == null ? void 0 : e.documentElement;\n}\nfunction Is(t) {\n  return Re() ? t instanceof Node || t instanceof it(t).Node : !1;\n}\nfunction ct(t) {\n  return Re() ? t instanceof Element || t instanceof it(t).Element : !1;\n}\nfunction yt(t) {\n  return Re() ? t instanceof HTMLElement || t instanceof it(t).HTMLElement : !1;\n}\nfunction Ln(t) {\n  return !Re() || typeof ShadowRoot == \"undefined\" ? !1 : t instanceof ShadowRoot || t instanceof it(t).ShadowRoot;\n}\nconst vo = /* @__PURE__ */ new Set([\"inline\", \"contents\"]);\nfunction he(t) {\n  const {\n    overflow: e,\n    overflowX: n,\n    overflowY: s,\n    display: r\n  } = ut(t);\n  return /auto|scroll|overlay|hidden|clip/.test(e + s + n) && !vo.has(r);\n}\nconst Eo = /* @__PURE__ */ new Set([\"table\", \"td\", \"th\"]);\nfunction $o(t) {\n  return Eo.has(te(t));\n}\nconst Lo = [\":popover-open\", \":modal\"];\nfunction _e(t) {\n  return Lo.some((e) => {\n    try {\n      return t.matches(e);\n    } catch (n) {\n      return !1;\n    }\n  });\n}\nconst Po = [\"transform\", \"translate\", \"scale\", \"rotate\", \"perspective\"], Oo = [\"transform\", \"translate\", \"scale\", \"rotate\", \"perspective\", \"filter\"], Ro = [\"paint\", \"layout\", \"strict\", \"content\"];\nfunction kn(t) {\n  const e = Sn(), n = ct(t) ? ut(t) : t;\n  return Po.some((s) => n[s] ? n[s] !== \"none\" : !1) || (n.containerType ? n.containerType !== \"normal\" : !1) || !e && (n.backdropFilter ? n.backdropFilter !== \"none\" : !1) || !e && (n.filter ? n.filter !== \"none\" : !1) || Oo.some((s) => (n.willChange || \"\").includes(s)) || Ro.some((s) => (n.contain || \"\").includes(s));\n}\nfunction _o(t) {\n  let e = Pt(t);\n  for (; yt(e) && !Qt(e); ) {\n    if (kn(e))\n      return e;\n    if (_e(e))\n      return null;\n    e = Pt(e);\n  }\n  return null;\n}\nfunction Sn() {\n  return typeof CSS == \"undefined\" || !CSS.supports ? !1 : CSS.supports(\"-webkit-backdrop-filter\", \"none\");\n}\nconst Io = /* @__PURE__ */ new Set([\"html\", \"body\", \"#document\"]);\nfunction Qt(t) {\n  return Io.has(te(t));\n}\nfunction ut(t) {\n  return it(t).getComputedStyle(t);\n}\nfunction Ie(t) {\n  return ct(t) ? {\n    scrollLeft: t.scrollLeft,\n    scrollTop: t.scrollTop\n  } : {\n    scrollLeft: t.scrollX,\n    scrollTop: t.scrollY\n  };\n}\nfunction Pt(t) {\n  if (te(t) === \"html\")\n    return t;\n  const e = (\n    // Step into the shadow DOM of the parent of a slotted node.\n    t.assignedSlot || // DOM Element detected.\n    t.parentNode || // ShadowRoot detected.\n    Ln(t) && t.host || // Fallback.\n    bt(t)\n  );\n  return Ln(e) ? e.host : e;\n}\nfunction Ns(t) {\n  const e = Pt(t);\n  return Qt(e) ? t.ownerDocument ? t.ownerDocument.body : t.body : yt(e) && he(e) ? e : Ns(e);\n}\nfunction le(t, e, n) {\n  var s;\n  e === void 0 && (e = []), n === void 0 && (n = !0);\n  const r = Ns(t), o = r === ((s = t.ownerDocument) == null ? void 0 : s.body), a = it(r);\n  if (o) {\n    const l = sn(a);\n    return e.concat(a, a.visualViewport || [], he(r) ? r : [], l && n ? le(l) : []);\n  }\n  return e.concat(r, le(r, [], n));\n}\nfunction sn(t) {\n  return t.parent && Object.getPrototypeOf(t.parent) ? t.frameElement : null;\n}\nfunction Ds(t) {\n  const e = ut(t);\n  let n = parseFloat(e.width) || 0, s = parseFloat(e.height) || 0;\n  const r = yt(t), o = r ? t.offsetWidth : n, a = r ? t.offsetHeight : s, l = Te(n) !== o || Te(s) !== a;\n  return l && (n = o, s = a), {\n    width: n,\n    height: s,\n    $: l\n  };\n}\nfunction yn(t) {\n  return ct(t) ? t : t.contextElement;\n}\nfunction qt(t) {\n  const e = yn(t);\n  if (!yt(e))\n    return St(1);\n  const n = e.getBoundingClientRect(), {\n    width: s,\n    height: r,\n    $: o\n  } = Ds(e);\n  let a = (o ? Te(n.width) : n.width) / s, l = (o ? Te(n.height) : n.height) / r;\n  return (!a || !Number.isFinite(a)) && (a = 1), (!l || !Number.isFinite(l)) && (l = 1), {\n    x: a,\n    y: l\n  };\n}\nconst No = /* @__PURE__ */ St(0);\nfunction Fs(t) {\n  const e = it(t);\n  return !Sn() || !e.visualViewport ? No : {\n    x: e.visualViewport.offsetLeft,\n    y: e.visualViewport.offsetTop\n  };\n}\nfunction Do(t, e, n) {\n  return e === void 0 && (e = !1), !n || e && n !== it(t) ? !1 : e;\n}\nfunction Dt(t, e, n, s) {\n  e === void 0 && (e = !1), n === void 0 && (n = !1);\n  const r = t.getBoundingClientRect(), o = yn(t);\n  let a = St(1);\n  e && (s ? ct(s) && (a = qt(s)) : a = qt(t));\n  const l = Do(o, n, s) ? Fs(o) : St(0);\n  let u = (r.left + l.x) / a.x, i = (r.top + l.y) / a.y, c = r.width / a.x, h = r.height / a.y;\n  if (o) {\n    const f = it(o), p = s && ct(s) ? it(s) : s;\n    let d = f, m = sn(d);\n    for (; m && s && p !== d; ) {\n      const k = qt(m), y = m.getBoundingClientRect(), x = ut(m), A = y.left + (m.clientLeft + parseFloat(x.paddingLeft)) * k.x, M = y.top + (m.clientTop + parseFloat(x.paddingTop)) * k.y;\n      u *= k.x, i *= k.y, c *= k.x, h *= k.y, u += A, i += M, d = it(m), m = sn(d);\n    }\n  }\n  return Ae({\n    width: c,\n    height: h,\n    x: u,\n    y: i\n  });\n}\nfunction Ne(t, e) {\n  const n = Ie(t).scrollLeft;\n  return e ? e.left + n : Dt(bt(t)).left + n;\n}\nfunction Ms(t, e) {\n  const n = t.getBoundingClientRect(), s = n.left + e.scrollLeft - Ne(t, n), r = n.top + e.scrollTop;\n  return {\n    x: s,\n    y: r\n  };\n}\nfunction Fo(t) {\n  let {\n    elements: e,\n    rect: n,\n    offsetParent: s,\n    strategy: r\n  } = t;\n  const o = r === \"fixed\", a = bt(s), l = e ? _e(e.floating) : !1;\n  if (s === a || l && o)\n    return n;\n  let u = {\n    scrollLeft: 0,\n    scrollTop: 0\n  }, i = St(1);\n  const c = St(0), h = yt(s);\n  if ((h || !h && !o) && ((te(s) !== \"body\" || he(a)) && (u = Ie(s)), yt(s))) {\n    const p = Dt(s);\n    i = qt(s), c.x = p.x + s.clientLeft, c.y = p.y + s.clientTop;\n  }\n  const f = a && !h && !o ? Ms(a, u) : St(0);\n  return {\n    width: n.width * i.x,\n    height: n.height * i.y,\n    x: n.x * i.x - u.scrollLeft * i.x + c.x + f.x,\n    y: n.y * i.y - u.scrollTop * i.y + c.y + f.y\n  };\n}\nfunction Mo(t) {\n  return Array.from(t.getClientRects());\n}\nfunction jo(t) {\n  const e = bt(t), n = Ie(t), s = t.ownerDocument.body, r = Gt(e.scrollWidth, e.clientWidth, s.scrollWidth, s.clientWidth), o = Gt(e.scrollHeight, e.clientHeight, s.scrollHeight, s.clientHeight);\n  let a = -n.scrollLeft + Ne(t);\n  const l = -n.scrollTop;\n  return ut(s).direction === \"rtl\" && (a += Gt(e.clientWidth, s.clientWidth) - r), {\n    width: r,\n    height: o,\n    x: a,\n    y: l\n  };\n}\nconst Pn = 25;\nfunction Bo(t, e) {\n  const n = it(t), s = bt(t), r = n.visualViewport;\n  let o = s.clientWidth, a = s.clientHeight, l = 0, u = 0;\n  if (r) {\n    o = r.width, a = r.height;\n    const c = Sn();\n    (!c || c && e === \"fixed\") && (l = r.offsetLeft, u = r.offsetTop);\n  }\n  const i = Ne(s);\n  if (i <= 0) {\n    const c = s.ownerDocument, h = c.body, f = getComputedStyle(h), p = c.compatMode === \"CSS1Compat\" && parseFloat(f.marginLeft) + parseFloat(f.marginRight) || 0, d = Math.abs(s.clientWidth - h.clientWidth - p);\n    d <= Pn && (o -= d);\n  } else i <= Pn && (o += i);\n  return {\n    width: o,\n    height: a,\n    x: l,\n    y: u\n  };\n}\nconst Wo = /* @__PURE__ */ new Set([\"absolute\", \"fixed\"]);\nfunction Uo(t, e) {\n  const n = Dt(t, !0, e === \"fixed\"), s = n.top + t.clientTop, r = n.left + t.clientLeft, o = yt(t) ? qt(t) : St(1), a = t.clientWidth * o.x, l = t.clientHeight * o.y, u = r * o.x, i = s * o.y;\n  return {\n    width: a,\n    height: l,\n    x: u,\n    y: i\n  };\n}\nfunction On(t, e, n) {\n  let s;\n  if (e === \"viewport\")\n    s = Bo(t, n);\n  else if (e === \"document\")\n    s = jo(bt(t));\n  else if (ct(e))\n    s = Uo(e, n);\n  else {\n    const r = Fs(t);\n    s = {\n      x: e.x - r.x,\n      y: e.y - r.y,\n      width: e.width,\n      height: e.height\n    };\n  }\n  return Ae(s);\n}\nfunction js(t, e) {\n  const n = Pt(t);\n  return n === e || !ct(n) || Qt(n) ? !1 : ut(n).position === \"fixed\" || js(n, e);\n}\nfunction zo(t, e) {\n  const n = e.get(t);\n  if (n)\n    return n;\n  let s = le(t, [], !1).filter((l) => ct(l) && te(l) !== \"body\"), r = null;\n  const o = ut(t).position === \"fixed\";\n  let a = o ? Pt(t) : t;\n  for (; ct(a) && !Qt(a); ) {\n    const l = ut(a), u = kn(a);\n    !u && l.position === \"fixed\" && (r = null), (o ? !u && !r : !u && l.position === \"static\" && !!r && Wo.has(r.position) || he(a) && !u && js(t, a)) ? s = s.filter((c) => c !== a) : r = l, a = Pt(a);\n  }\n  return e.set(t, s), s;\n}\nfunction Vo(t) {\n  let {\n    element: e,\n    boundary: n,\n    rootBoundary: s,\n    strategy: r\n  } = t;\n  const a = [...n === \"clippingAncestors\" ? _e(e) ? [] : zo(e, this._c) : [].concat(n), s], l = a[0], u = a.reduce((i, c) => {\n    const h = On(e, c, r);\n    return i.top = Gt(h.top, i.top), i.right = nn(h.right, i.right), i.bottom = nn(h.bottom, i.bottom), i.left = Gt(h.left, i.left), i;\n  }, On(e, l, r));\n  return {\n    width: u.right - u.left,\n    height: u.bottom - u.top,\n    x: u.left,\n    y: u.top\n  };\n}\nfunction Ho(t) {\n  const {\n    width: e,\n    height: n\n  } = Ds(t);\n  return {\n    width: e,\n    height: n\n  };\n}\nfunction Go(t, e, n) {\n  const s = yt(e), r = bt(e), o = n === \"fixed\", a = Dt(t, !0, o, e);\n  let l = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const u = St(0);\n  function i() {\n    u.x = Ne(r);\n  }\n  if (s || !s && !o)\n    if ((te(e) !== \"body\" || he(r)) && (l = Ie(e)), s) {\n      const p = Dt(e, !0, o, e);\n      u.x = p.x + e.clientLeft, u.y = p.y + e.clientTop;\n    } else r && i();\n  o && !s && r && i();\n  const c = r && !s && !o ? Ms(r, l) : St(0), h = a.left + l.scrollLeft - u.x - c.x, f = a.top + l.scrollTop - u.y - c.y;\n  return {\n    x: h,\n    y: f,\n    width: a.width,\n    height: a.height\n  };\n}\nfunction Fe(t) {\n  return ut(t).position === \"static\";\n}\nfunction Rn(t, e) {\n  if (!yt(t) || ut(t).position === \"fixed\")\n    return null;\n  if (e)\n    return e(t);\n  let n = t.offsetParent;\n  return bt(t) === n && (n = n.ownerDocument.body), n;\n}\nfunction Bs(t, e) {\n  const n = it(t);\n  if (_e(t))\n    return n;\n  if (!yt(t)) {\n    let r = Pt(t);\n    for (; r && !Qt(r); ) {\n      if (ct(r) && !Fe(r))\n        return r;\n      r = Pt(r);\n    }\n    return n;\n  }\n  let s = Rn(t, e);\n  for (; s && $o(s) && Fe(s); )\n    s = Rn(s, e);\n  return s && Qt(s) && Fe(s) && !kn(s) ? n : s || _o(t) || n;\n}\nconst qo = function(t) {\n  return R(this, null, function* () {\n    const e = this.getOffsetParent || Bs, n = this.getDimensions, s = yield n(t.floating);\n    return {\n      reference: Go(t.reference, yield e(t.floating), t.strategy),\n      floating: {\n        x: 0,\n        y: 0,\n        width: s.width,\n        height: s.height\n      }\n    };\n  });\n};\nfunction Ko(t) {\n  return ut(t).direction === \"rtl\";\n}\nconst V = {\n  convertOffsetParentRelativeRectToViewportRelativeRect: Fo,\n  getDocumentElement: bt,\n  getClippingRect: Vo,\n  getOffsetParent: Bs,\n  getElementRects: qo,\n  getClientRects: Mo,\n  getDimensions: Ho,\n  getScale: qt,\n  isElement: ct,\n  isRTL: Ko\n};\nfunction Ws(t, e) {\n  return t.x === e.x && t.y === e.y && t.width === e.width && t.height === e.height;\n}\nfunction Qo(t, e) {\n  let n = null, s;\n  const r = bt(t);\n  function o() {\n    var l;\n    clearTimeout(s), (l = n) == null || l.disconnect(), n = null;\n  }\n  function a(l, u) {\n    l === void 0 && (l = !1), u === void 0 && (u = 1), o();\n    const i = t.getBoundingClientRect(), {\n      left: c,\n      top: h,\n      width: f,\n      height: p\n    } = i;\n    if (l || e(), !f || !p)\n      return;\n    const d = pe(h), m = pe(r.clientWidth - (c + f)), k = pe(r.clientHeight - (h + p)), y = pe(c), A = {\n      rootMargin: -d + \"px \" + -m + \"px \" + -k + \"px \" + -y + \"px\",\n      threshold: Gt(0, nn(1, u)) || 1\n    };\n    let M = !0;\n    function et(w) {\n      const C = w[0].intersectionRatio;\n      if (C !== u) {\n        if (!M)\n          return a();\n        C ? a(!1, C) : s = setTimeout(() => {\n          a(!1, 1e-7);\n        }, 1e3);\n      }\n      C === 1 && !Ws(i, t.getBoundingClientRect()) && a(), M = !1;\n    }\n    try {\n      n = new IntersectionObserver(et, q(U({}, A), {\n        // Handle <iframe>s\n        root: r.ownerDocument\n      }));\n    } catch (w) {\n      n = new IntersectionObserver(et, A);\n    }\n    n.observe(t);\n  }\n  return a(!0), o;\n}\nfunction rn(t, e, n, s) {\n  s === void 0 && (s = {});\n  const {\n    ancestorScroll: r = !0,\n    ancestorResize: o = !0,\n    elementResize: a = typeof ResizeObserver == \"function\",\n    layoutShift: l = typeof IntersectionObserver == \"function\",\n    animationFrame: u = !1\n  } = s, i = yn(t), c = r || o ? [...i ? le(i) : [], ...le(e)] : [];\n  c.forEach((y) => {\n    r && y.addEventListener(\"scroll\", n, {\n      passive: !0\n    }), o && y.addEventListener(\"resize\", n);\n  });\n  const h = i && l ? Qo(i, n) : null;\n  let f = -1, p = null;\n  a && (p = new ResizeObserver((y) => {\n    let [x] = y;\n    x && x.target === i && p && (p.unobserve(e), cancelAnimationFrame(f), f = requestAnimationFrame(() => {\n      var A;\n      (A = p) == null || A.observe(e);\n    })), n();\n  }), i && !u && p.observe(i), p.observe(e));\n  let d, m = u ? Dt(t) : null;\n  u && k();\n  function k() {\n    const y = Dt(t);\n    m && !Ws(m, y) && n(), m = y, d = requestAnimationFrame(k);\n  }\n  return n(), () => {\n    var y;\n    c.forEach((x) => {\n      r && x.removeEventListener(\"scroll\", n), o && x.removeEventListener(\"resize\", n);\n    }), h == null || h(), (y = p) == null || y.disconnect(), p = null, u && cancelAnimationFrame(d);\n  };\n}\nconst Yo = Ao, { hasOwnProperty: bn } = Object.prototype, ne = function() {\n};\nfunction _n(t) {\n  return typeof t == \"function\" ? t : ne;\n}\nfunction In(t, e) {\n  return function(n, s, r) {\n    n.type === e && t.call(this, n, s, r);\n  };\n}\nfunction Xo(t, e) {\n  const n = e.structure, s = [];\n  for (const r in n) {\n    if (bn.call(n, r) === !1)\n      continue;\n    let o = n[r];\n    const a = {\n      name: r,\n      type: !1,\n      nullable: !1\n    };\n    Array.isArray(o) || (o = [o]);\n    for (const l of o)\n      l === null ? a.nullable = !0 : typeof l == \"string\" ? a.type = \"node\" : Array.isArray(l) && (a.type = \"list\");\n    a.type && s.push(a);\n  }\n  return s.length ? {\n    context: e.walkContext,\n    fields: s\n  } : null;\n}\nfunction Jo(t) {\n  const e = {};\n  for (const n in t.node)\n    if (bn.call(t.node, n)) {\n      const s = t.node[n];\n      if (!s.structure)\n        throw new Error(\"Missed `structure` field in `\" + n + \"` node type definition\");\n      e[n] = Xo(n, s);\n    }\n  return e;\n}\nfunction Nn(t, e) {\n  const n = t.fields.slice(), s = t.context, r = typeof s == \"string\";\n  return e && n.reverse(), function(o, a, l, u) {\n    let i;\n    r && (i = a[s], a[s] = o);\n    for (const c of n) {\n      const h = o[c.name];\n      if (!c.nullable || h) {\n        if (c.type === \"list\") {\n          if (e ? h.reduceRight(u, !1) : h.reduce(u, !1))\n            return !0;\n        } else if (l(h))\n          return !0;\n      }\n    }\n    r && (a[s] = i);\n  };\n}\nfunction Dn({\n  StyleSheet: t,\n  Atrule: e,\n  Rule: n,\n  Block: s,\n  DeclarationList: r\n}) {\n  return {\n    Atrule: {\n      StyleSheet: t,\n      Atrule: e,\n      Rule: n,\n      Block: s\n    },\n    Rule: {\n      StyleSheet: t,\n      Atrule: e,\n      Rule: n,\n      Block: s\n    },\n    Declaration: {\n      StyleSheet: t,\n      Atrule: e,\n      Rule: n,\n      Block: s,\n      DeclarationList: r\n    }\n  };\n}\nfunction Zo(t) {\n  const e = Jo(t), n = {}, s = {}, r = Symbol(\"break-walk\"), o = Symbol(\"skip-node\");\n  for (const i in e)\n    bn.call(e, i) && e[i] !== null && (n[i] = Nn(e[i], !1), s[i] = Nn(e[i], !0));\n  const a = Dn(n), l = Dn(s), u = function(i, c) {\n    function h(y, x, A) {\n      const M = f.call(k, y, x, A);\n      return M === r ? !0 : M === o ? !1 : !!(d.hasOwnProperty(y.type) && d[y.type](y, k, h, m) || p.call(k, y, x, A) === r);\n    }\n    let f = ne, p = ne, d = n, m = (y, x, A, M) => y || h(x, A, M);\n    const k = {\n      break: r,\n      skip: o,\n      root: i,\n      stylesheet: null,\n      atrule: null,\n      atrulePrelude: null,\n      rule: null,\n      selector: null,\n      block: null,\n      declaration: null,\n      function: null\n    };\n    if (typeof c == \"function\")\n      f = c;\n    else if (c && (f = _n(c.enter), p = _n(c.leave), c.reverse && (d = s), c.visit)) {\n      if (a.hasOwnProperty(c.visit))\n        d = c.reverse ? l[c.visit] : a[c.visit];\n      else if (!e.hasOwnProperty(c.visit))\n        throw new Error(\"Bad value `\" + c.visit + \"` for `visit` option (should be: \" + Object.keys(e).sort().join(\", \") + \")\");\n      f = In(f, c.visit), p = In(p, c.visit);\n    }\n    if (f === ne && p === ne)\n      throw new Error(\"Neither `enter` nor `leave` walker handler is set or both aren't a function\");\n    h(i);\n  };\n  return u.break = r, u.skip = o, u.find = function(i, c) {\n    let h = null;\n    return u(i, function(f, p, d) {\n      if (c.call(this, f, p, d))\n        return h = f, r;\n    }), h;\n  }, u.findLast = function(i, c) {\n    let h = null;\n    return u(i, {\n      reverse: !0,\n      enter(f, p, d) {\n        if (c.call(this, f, p, d))\n          return h = f, r;\n      }\n    }), h;\n  }, u.findAll = function(i, c) {\n    const h = [];\n    return u(i, function(f, p, d) {\n      c.call(this, f, p, d) && h.push(f);\n    }), h;\n  }, u;\n}\nconst vt = 0, g = 1, T = 2, z = 3, I = 4, Tt = 5, ta = 6, Q = 7, at = 8, L = 9, b = 10, F = 11, E = 12, W = 13, De = 14, nt = 15, X = 16, tt = 17, ft = 18, ee = 19, ce = 20, _ = 21, S = 22, ht = 23, Yt = 24, Y = 25, ea = 0;\nfunction rt(t) {\n  return t >= 48 && t <= 57;\n}\nfunction Xt(t) {\n  return rt(t) || // 0 .. 9\n  t >= 65 && t <= 70 || // A .. F\n  t >= 97 && t <= 102;\n}\nfunction xn(t) {\n  return t >= 65 && t <= 90;\n}\nfunction na(t) {\n  return t >= 97 && t <= 122;\n}\nfunction sa(t) {\n  return xn(t) || na(t);\n}\nfunction ra(t) {\n  return t >= 128;\n}\nfunction ve(t) {\n  return sa(t) || ra(t) || t === 95;\n}\nfunction Us(t) {\n  return ve(t) || rt(t) || t === 45;\n}\nfunction ia(t) {\n  return t >= 0 && t <= 8 || t === 11 || t >= 14 && t <= 31 || t === 127;\n}\nfunction Ee(t) {\n  return t === 10 || t === 13 || t === 12;\n}\nfunction Ft(t) {\n  return Ee(t) || t === 32 || t === 9;\n}\nfunction kt(t, e) {\n  return !(t !== 92 || Ee(e) || e === ea);\n}\nfunction Me(t, e, n) {\n  return t === 45 ? ve(e) || e === 45 || kt(e, n) : ve(t) ? !0 : t === 92 ? kt(t, e) : !1;\n}\nfunction je(t, e, n) {\n  return t === 43 || t === 45 ? rt(e) ? 2 : e === 46 && rt(n) ? 3 : 0 : t === 46 ? rt(e) ? 2 : 0 : rt(t) ? 1 : 0;\n}\nfunction zs(t) {\n  return t === 65279 || t === 65534 ? 1 : 0;\n}\nconst on = new Array(128), oa = 128, ye = 130, Vs = 131, Cn = 132, Hs = 133;\nfor (let t = 0; t < on.length; t++)\n  on[t] = Ft(t) && ye || rt(t) && Vs || ve(t) && Cn || ia(t) && Hs || t || oa;\nfunction Be(t) {\n  return t < 128 ? on[t] : Cn;\n}\nfunction Kt(t, e) {\n  return e < t.length ? t.charCodeAt(e) : 0;\n}\nfunction an(t, e, n) {\n  return n === 13 && Kt(t, e + 1) === 10 ? 2 : 1;\n}\nfunction Gs(t, e, n) {\n  let s = t.charCodeAt(e);\n  return xn(s) && (s = s | 32), s === n;\n}\nfunction $e(t, e, n, s) {\n  if (n - e !== s.length || e < 0 || n > t.length)\n    return !1;\n  for (let r = e; r < n; r++) {\n    const o = s.charCodeAt(r - e);\n    let a = t.charCodeAt(r);\n    if (xn(a) && (a = a | 32), a !== o)\n      return !1;\n  }\n  return !0;\n}\nfunction aa(t, e) {\n  for (; e >= 0 && Ft(t.charCodeAt(e)); e--)\n    ;\n  return e + 1;\n}\nfunction de(t, e) {\n  for (; e < t.length && Ft(t.charCodeAt(e)); e++)\n    ;\n  return e;\n}\nfunction We(t, e) {\n  for (; e < t.length && rt(t.charCodeAt(e)); e++)\n    ;\n  return e;\n}\nfunction Jt(t, e) {\n  if (e += 2, Xt(Kt(t, e - 1))) {\n    for (const s = Math.min(t.length, e + 5); e < s && Xt(Kt(t, e)); e++)\n      ;\n    const n = Kt(t, e);\n    Ft(n) && (e += an(t, e, n));\n  }\n  return e;\n}\nfunction ge(t, e) {\n  for (; e < t.length; e++) {\n    const n = t.charCodeAt(e);\n    if (!Us(n)) {\n      if (kt(n, Kt(t, e + 1))) {\n        e = Jt(t, e) - 1;\n        continue;\n      }\n      break;\n    }\n  }\n  return e;\n}\nfunction qs(t, e) {\n  let n = t.charCodeAt(e);\n  if ((n === 43 || n === 45) && (n = t.charCodeAt(e += 1)), rt(n) && (e = We(t, e + 1), n = t.charCodeAt(e)), n === 46 && rt(t.charCodeAt(e + 1)) && (e += 2, e = We(t, e)), Gs(\n    t,\n    e,\n    101\n    /* e */\n  )) {\n    let s = 0;\n    n = t.charCodeAt(e + 1), (n === 45 || n === 43) && (s = 1, n = t.charCodeAt(e + 2)), rt(n) && (e = We(t, e + 1 + s + 1));\n  }\n  return e;\n}\nfunction Ue(t, e) {\n  for (; e < t.length; e++) {\n    const n = t.charCodeAt(e);\n    if (n === 41) {\n      e++;\n      break;\n    }\n    kt(n, Kt(t, e + 1)) && (e = Jt(t, e));\n  }\n  return e;\n}\nfunction Ks(t) {\n  if (t.length === 1 && !Xt(t.charCodeAt(0)))\n    return t[0];\n  let e = parseInt(t, 16);\n  return (e === 0 || // If this number is zero,\n  e >= 55296 && e <= 57343 || // or is for a surrogate,\n  e > 1114111) && (e = 65533), String.fromCodePoint(e);\n}\nconst Qs = [\n  \"EOF-token\",\n  \"ident-token\",\n  \"function-token\",\n  \"at-keyword-token\",\n  \"hash-token\",\n  \"string-token\",\n  \"bad-string-token\",\n  \"url-token\",\n  \"bad-url-token\",\n  \"delim-token\",\n  \"number-token\",\n  \"percentage-token\",\n  \"dimension-token\",\n  \"whitespace-token\",\n  \"CDO-token\",\n  \"CDC-token\",\n  \"colon-token\",\n  \"semicolon-token\",\n  \"comma-token\",\n  \"[-token\",\n  \"]-token\",\n  \"(-token\",\n  \")-token\",\n  \"{-token\",\n  \"}-token\",\n  \"comment-token\"\n], la = 16 * 1024;\nfunction Le(t = null, e) {\n  return t === null || t.length < e ? new Uint32Array(Math.max(e + 1024, la)) : t;\n}\nconst Fn = 10, ca = 12, Mn = 13;\nfunction jn(t) {\n  const e = t.source, n = e.length, s = e.length > 0 ? zs(e.charCodeAt(0)) : 0, r = Le(t.lines, n), o = Le(t.columns, n);\n  let a = t.startLine, l = t.startColumn;\n  for (let u = s; u < n; u++) {\n    const i = e.charCodeAt(u);\n    r[u] = a, o[u] = l++, (i === Fn || i === Mn || i === ca) && (i === Mn && u + 1 < n && e.charCodeAt(u + 1) === Fn && (u++, r[u] = a, o[u] = l), a++, l = 1);\n  }\n  r[n] = a, o[n] = l, t.lines = r, t.columns = o, t.computed = !0;\n}\nclass ua {\n  constructor(e, n, s, r) {\n    this.setSource(e, n, s, r), this.lines = null, this.columns = null;\n  }\n  setSource(e = \"\", n = 0, s = 1, r = 1) {\n    this.source = e, this.startOffset = n, this.startLine = s, this.startColumn = r, this.computed = !1;\n  }\n  getLocation(e, n) {\n    return this.computed || jn(this), {\n      source: n,\n      offset: this.startOffset + e,\n      line: this.lines[e],\n      column: this.columns[e]\n    };\n  }\n  getLocationRange(e, n, s) {\n    return this.computed || jn(this), {\n      source: s,\n      start: {\n        offset: this.startOffset + e,\n        line: this.lines[e],\n        column: this.columns[e]\n      },\n      end: {\n        offset: this.startOffset + n,\n        line: this.lines[n],\n        column: this.columns[n]\n      }\n    };\n  }\n}\nconst dt = 16777215, gt = 24, Mt = new Uint8Array(32);\nMt[T] = S;\nMt[_] = S;\nMt[ee] = ce;\nMt[ht] = Yt;\nfunction Bn(t) {\n  return Mt[t] !== 0;\n}\nclass ha {\n  constructor(e, n) {\n    this.setSource(e, n);\n  }\n  reset() {\n    this.eof = !1, this.tokenIndex = -1, this.tokenType = 0, this.tokenStart = this.firstCharOffset, this.tokenEnd = this.firstCharOffset;\n  }\n  setSource(e = \"\", n = () => {\n  }) {\n    e = String(e || \"\");\n    const s = e.length, r = Le(this.offsetAndType, e.length + 1), o = Le(this.balance, e.length + 1);\n    let a = 0, l = -1, u = 0, i = e.length;\n    this.offsetAndType = null, this.balance = null, o.fill(0), n(e, (c, h, f) => {\n      const p = a++;\n      if (r[p] = c << gt | f, l === -1 && (l = h), o[p] = i, c === u) {\n        const d = o[i];\n        o[i] = p, i = d, u = Mt[r[d] >> gt];\n      } else Bn(c) && (i = p, u = Mt[c]);\n    }), r[a] = vt << gt | s, o[a] = a;\n    for (let c = 0; c < a; c++) {\n      const h = o[c];\n      if (h <= c) {\n        const f = o[h];\n        f !== c && (o[c] = f);\n      } else h > a && (o[c] = a);\n    }\n    this.source = e, this.firstCharOffset = l === -1 ? 0 : l, this.tokenCount = a, this.offsetAndType = r, this.balance = o, this.reset(), this.next();\n  }\n  lookupType(e) {\n    return e += this.tokenIndex, e < this.tokenCount ? this.offsetAndType[e] >> gt : vt;\n  }\n  lookupTypeNonSC(e) {\n    for (let n = this.tokenIndex; n < this.tokenCount; n++) {\n      const s = this.offsetAndType[n] >> gt;\n      if (s !== W && s !== Y && e-- === 0)\n        return s;\n    }\n    return vt;\n  }\n  lookupOffset(e) {\n    return e += this.tokenIndex, e < this.tokenCount ? this.offsetAndType[e - 1] & dt : this.source.length;\n  }\n  lookupOffsetNonSC(e) {\n    for (let n = this.tokenIndex; n < this.tokenCount; n++) {\n      const s = this.offsetAndType[n] >> gt;\n      if (s !== W && s !== Y && e-- === 0)\n        return n - this.tokenIndex;\n    }\n    return vt;\n  }\n  lookupValue(e, n) {\n    return e += this.tokenIndex, e < this.tokenCount ? $e(\n      this.source,\n      this.offsetAndType[e - 1] & dt,\n      this.offsetAndType[e] & dt,\n      n\n    ) : !1;\n  }\n  getTokenStart(e) {\n    return e === this.tokenIndex ? this.tokenStart : e > 0 ? e < this.tokenCount ? this.offsetAndType[e - 1] & dt : this.offsetAndType[this.tokenCount] & dt : this.firstCharOffset;\n  }\n  substrToCursor(e) {\n    return this.source.substring(e, this.tokenStart);\n  }\n  isBalanceEdge(e) {\n    return this.balance[this.tokenIndex] < e;\n  }\n  isDelim(e, n) {\n    return n ? this.lookupType(n) === L && this.source.charCodeAt(this.lookupOffset(n)) === e : this.tokenType === L && this.source.charCodeAt(this.tokenStart) === e;\n  }\n  skip(e) {\n    let n = this.tokenIndex + e;\n    n < this.tokenCount ? (this.tokenIndex = n, this.tokenStart = this.offsetAndType[n - 1] & dt, n = this.offsetAndType[n], this.tokenType = n >> gt, this.tokenEnd = n & dt) : (this.tokenIndex = this.tokenCount, this.next());\n  }\n  next() {\n    let e = this.tokenIndex + 1;\n    e < this.tokenCount ? (this.tokenIndex = e, this.tokenStart = this.tokenEnd, e = this.offsetAndType[e], this.tokenType = e >> gt, this.tokenEnd = e & dt) : (this.eof = !0, this.tokenIndex = this.tokenCount, this.tokenType = vt, this.tokenStart = this.tokenEnd = this.source.length);\n  }\n  skipSC() {\n    for (; this.tokenType === W || this.tokenType === Y; )\n      this.next();\n  }\n  skipUntilBalanced(e, n) {\n    let s = e, r = 0, o = 0;\n    t:\n      for (; s < this.tokenCount; s++) {\n        if (r = this.balance[s], r < e)\n          break t;\n        switch (o = s > 0 ? this.offsetAndType[s - 1] & dt : this.firstCharOffset, n(this.source.charCodeAt(o))) {\n          case 1:\n            break t;\n          case 2:\n            s++;\n            break t;\n          default:\n            Bn(this.offsetAndType[s] >> gt) && (s = r);\n        }\n      }\n    this.skip(s - this.tokenIndex);\n  }\n  forEachToken(e) {\n    for (let n = 0, s = this.firstCharOffset; n < this.tokenCount; n++) {\n      const r = s, o = this.offsetAndType[n], a = o & dt, l = o >> gt;\n      s = a, e(l, r, a, n);\n    }\n  }\n  dump() {\n    const e = new Array(this.tokenCount);\n    return this.forEachToken((n, s, r, o) => {\n      e[o] = {\n        idx: o,\n        type: Qs[n],\n        chunk: this.source.substring(s, r),\n        balance: this.balance[o]\n      };\n    }), e;\n  }\n}\nfunction Ys(t, e) {\n  function n(h) {\n    return h < l ? t.charCodeAt(h) : 0;\n  }\n  function s() {\n    if (i = qs(t, i), Me(n(i), n(i + 1), n(i + 2))) {\n      c = E, i = ge(t, i);\n      return;\n    }\n    if (n(i) === 37) {\n      c = F, i++;\n      return;\n    }\n    c = b;\n  }\n  function r() {\n    const h = i;\n    if (i = ge(t, i), $e(t, h, i, \"url\") && n(i) === 40) {\n      if (i = de(t, i + 1), n(i) === 34 || n(i) === 39) {\n        c = T, i = h + 4;\n        return;\n      }\n      a();\n      return;\n    }\n    if (n(i) === 40) {\n      c = T, i++;\n      return;\n    }\n    c = g;\n  }\n  function o(h) {\n    for (h || (h = n(i++)), c = Tt; i < t.length; i++) {\n      const f = t.charCodeAt(i);\n      switch (Be(f)) {\n        // ending code point\n        case h:\n          i++;\n          return;\n        // EOF\n        // case EofCategory:\n        // This is a parse error. Return the <string-token>.\n        // return;\n        // newline\n        case ye:\n          if (Ee(f)) {\n            i += an(t, i, f), c = ta;\n            return;\n          }\n          break;\n        // U+005C REVERSE SOLIDUS (\\)\n        case 92:\n          if (i === t.length - 1)\n            break;\n          const p = n(i + 1);\n          Ee(p) ? i += an(t, i + 1, p) : kt(f, p) && (i = Jt(t, i) - 1);\n          break;\n      }\n    }\n  }\n  function a() {\n    for (c = Q, i = de(t, i); i < t.length; i++) {\n      const h = t.charCodeAt(i);\n      switch (Be(h)) {\n        // U+0029 RIGHT PARENTHESIS ())\n        case 41:\n          i++;\n          return;\n        // EOF\n        // case EofCategory:\n        // This is a parse error. Return the <url-token>.\n        // return;\n        // whitespace\n        case ye:\n          if (i = de(t, i), n(i) === 41 || i >= t.length) {\n            i < t.length && i++;\n            return;\n          }\n          i = Ue(t, i), c = at;\n          return;\n        // U+0022 QUOTATION MARK (\")\n        // U+0027 APOSTROPHE (')\n        // U+0028 LEFT PARENTHESIS (()\n        // non-printable code point\n        case 34:\n        case 39:\n        case 40:\n        case Hs:\n          i = Ue(t, i), c = at;\n          return;\n        // U+005C REVERSE SOLIDUS (\\)\n        case 92:\n          if (kt(h, n(i + 1))) {\n            i = Jt(t, i) - 1;\n            break;\n          }\n          i = Ue(t, i), c = at;\n          return;\n      }\n    }\n  }\n  t = String(t || \"\");\n  const l = t.length;\n  let u = zs(n(0)), i = u, c;\n  for (; i < l; ) {\n    const h = t.charCodeAt(i);\n    switch (Be(h)) {\n      // whitespace\n      case ye:\n        c = W, i = de(t, i + 1);\n        break;\n      // U+0022 QUOTATION MARK (\")\n      case 34:\n        o();\n        break;\n      // U+0023 NUMBER SIGN (#)\n      case 35:\n        Us(n(i + 1)) || kt(n(i + 1), n(i + 2)) ? (c = I, i = ge(t, i + 1)) : (c = L, i++);\n        break;\n      // U+0027 APOSTROPHE (')\n      case 39:\n        o();\n        break;\n      // U+0028 LEFT PARENTHESIS (()\n      case 40:\n        c = _, i++;\n        break;\n      // U+0029 RIGHT PARENTHESIS ())\n      case 41:\n        c = S, i++;\n        break;\n      // U+002B PLUS SIGN (+)\n      case 43:\n        je(h, n(i + 1), n(i + 2)) ? s() : (c = L, i++);\n        break;\n      // U+002C COMMA (,)\n      case 44:\n        c = ft, i++;\n        break;\n      // U+002D HYPHEN-MINUS (-)\n      case 45:\n        je(h, n(i + 1), n(i + 2)) ? s() : n(i + 1) === 45 && n(i + 2) === 62 ? (c = nt, i = i + 3) : Me(h, n(i + 1), n(i + 2)) ? r() : (c = L, i++);\n        break;\n      // U+002E FULL STOP (.)\n      case 46:\n        je(h, n(i + 1), n(i + 2)) ? s() : (c = L, i++);\n        break;\n      // U+002F SOLIDUS (/)\n      case 47:\n        n(i + 1) === 42 ? (c = Y, i = t.indexOf(\"*/\", i + 2), i = i === -1 ? t.length : i + 2) : (c = L, i++);\n        break;\n      // U+003A COLON (:)\n      case 58:\n        c = X, i++;\n        break;\n      // U+003B SEMICOLON (;)\n      case 59:\n        c = tt, i++;\n        break;\n      // U+003C LESS-THAN SIGN (<)\n      case 60:\n        n(i + 1) === 33 && n(i + 2) === 45 && n(i + 3) === 45 ? (c = De, i = i + 4) : (c = L, i++);\n        break;\n      // U+0040 COMMERCIAL AT (@)\n      case 64:\n        Me(n(i + 1), n(i + 2), n(i + 3)) ? (c = z, i = ge(t, i + 1)) : (c = L, i++);\n        break;\n      // U+005B LEFT SQUARE BRACKET ([)\n      case 91:\n        c = ee, i++;\n        break;\n      // U+005C REVERSE SOLIDUS (\\)\n      case 92:\n        kt(h, n(i + 1)) ? r() : (c = L, i++);\n        break;\n      // U+005D RIGHT SQUARE BRACKET (])\n      case 93:\n        c = ce, i++;\n        break;\n      // U+007B LEFT CURLY BRACKET ({)\n      case 123:\n        c = ht, i++;\n        break;\n      // U+007D RIGHT CURLY BRACKET (})\n      case 125:\n        c = Yt, i++;\n        break;\n      // digit\n      case Vs:\n        s();\n        break;\n      // name-start code point\n      case Cn:\n        r();\n        break;\n      // EOF\n      // case EofCategory:\n      // Return an <EOF-token>.\n      // break;\n      // anything else\n      default:\n        c = L, i++;\n    }\n    e(c, u, u = i);\n  }\n}\nconst mt = 43, st = 45, be = 110, _t = !0, fa = !1;\nfunction xe(t, e) {\n  let n = this.tokenStart + t;\n  const s = this.charCodeAt(n);\n  for ((s === mt || s === st) && (e && this.error(\"Number sign is not allowed\"), n++); n < this.tokenEnd; n++)\n    rt(this.charCodeAt(n)) || this.error(\"Integer is expected\", n);\n}\nfunction Vt(t) {\n  return xe.call(this, 0, t);\n}\nfunction At(t, e) {\n  if (!this.cmpChar(this.tokenStart + t, e)) {\n    let n = \"\";\n    switch (e) {\n      case be:\n        n = \"N is expected\";\n        break;\n      case st:\n        n = \"HyphenMinus is expected\";\n        break;\n    }\n    this.error(n, this.tokenStart + t);\n  }\n}\nfunction ze() {\n  let t = 0, e = 0, n = this.tokenType;\n  for (; n === W || n === Y; )\n    n = this.lookupType(++t);\n  if (n !== b)\n    if (this.isDelim(mt, t) || this.isDelim(st, t)) {\n      e = this.isDelim(mt, t) ? mt : st;\n      do\n        n = this.lookupType(++t);\n      while (n === W || n === Y);\n      n !== b && (this.skip(t), Vt.call(this, _t));\n    } else\n      return null;\n  return t > 0 && this.skip(t), e === 0 && (n = this.charCodeAt(this.tokenStart), n !== mt && n !== st && this.error(\"Number sign is expected\")), Vt.call(this, e !== 0), e === st ? \"-\" + this.consume(b) : this.consume(b);\n}\nconst pa = \"AnPlusB\", da = {\n  a: [String, null],\n  b: [String, null]\n};\nfunction Xs() {\n  const t = this.tokenStart;\n  let e = null, n = null;\n  if (this.tokenType === b)\n    Vt.call(this, fa), n = this.consume(b);\n  else if (this.tokenType === g && this.cmpChar(this.tokenStart, st))\n    switch (e = \"-1\", At.call(this, 1, be), this.tokenEnd - this.tokenStart) {\n      // -n\n      // -n <signed-integer>\n      // -n ['+' | '-'] <signless-integer>\n      case 2:\n        this.next(), n = ze.call(this);\n        break;\n      // -n- <signless-integer>\n      case 3:\n        At.call(this, 2, st), this.next(), this.skipSC(), Vt.call(this, _t), n = \"-\" + this.consume(b);\n        break;\n      // <dashndashdigit-ident>\n      default:\n        At.call(this, 2, st), xe.call(this, 3, _t), this.next(), n = this.substrToCursor(t + 2);\n    }\n  else if (this.tokenType === g || this.isDelim(mt) && this.lookupType(1) === g) {\n    let s = 0;\n    switch (e = \"1\", this.isDelim(mt) && (s = 1, this.next()), At.call(this, 0, be), this.tokenEnd - this.tokenStart) {\n      // '+'? n\n      // '+'? n <signed-integer>\n      // '+'? n ['+' | '-'] <signless-integer>\n      case 1:\n        this.next(), n = ze.call(this);\n        break;\n      // '+'? n- <signless-integer>\n      case 2:\n        At.call(this, 1, st), this.next(), this.skipSC(), Vt.call(this, _t), n = \"-\" + this.consume(b);\n        break;\n      // '+'? <ndashdigit-ident>\n      default:\n        At.call(this, 1, st), xe.call(this, 2, _t), this.next(), n = this.substrToCursor(t + s + 1);\n    }\n  } else if (this.tokenType === E) {\n    const s = this.charCodeAt(this.tokenStart), r = s === mt || s === st;\n    let o = this.tokenStart + r;\n    for (; o < this.tokenEnd && rt(this.charCodeAt(o)); o++)\n      ;\n    o === this.tokenStart + r && this.error(\"Integer is expected\", this.tokenStart + r), At.call(this, o - this.tokenStart, be), e = this.substring(t, o), o + 1 === this.tokenEnd ? (this.next(), n = ze.call(this)) : (At.call(this, o - this.tokenStart + 1, st), o + 2 === this.tokenEnd ? (this.next(), this.skipSC(), Vt.call(this, _t), n = \"-\" + this.consume(b)) : (xe.call(this, o - this.tokenStart + 2, _t), this.next(), n = this.substrToCursor(o + 1)));\n  } else\n    this.error();\n  return e !== null && e.charCodeAt(0) === mt && (e = e.substr(1)), n !== null && n.charCodeAt(0) === mt && (n = n.substr(1)), {\n    type: \"AnPlusB\",\n    loc: this.getLocation(t, this.tokenStart),\n    a: e,\n    b: n\n  };\n}\nfunction Js(t) {\n  if (t.a) {\n    const e = t.a === \"+1\" && \"n\" || t.a === \"1\" && \"n\" || t.a === \"-1\" && \"-n\" || t.a + \"n\";\n    if (t.b) {\n      const n = t.b[0] === \"-\" || t.b[0] === \"+\" ? t.b : \"+\" + t.b;\n      this.tokenize(e + n);\n    } else\n      this.tokenize(e);\n  } else\n    this.tokenize(t.b);\n}\nconst ga = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Js,\n  name: pa,\n  parse: Xs,\n  structure: da\n}, Symbol.toStringTag, { value: \"Module\" }));\nfunction Wn() {\n  return this.Raw(this.consumeUntilLeftCurlyBracketOrSemicolon, !0);\n}\nfunction ma() {\n  for (let t = 1, e; e = this.lookupType(t); t++) {\n    if (e === Yt)\n      return !0;\n    if (e === ht || e === z)\n      return !1;\n  }\n  return !1;\n}\nconst ka = \"Atrule\", Sa = \"atrule\", ya = {\n  name: String,\n  prelude: [\"AtrulePrelude\", \"Raw\", null],\n  block: [\"Block\", null]\n};\nfunction Zs(t = !1) {\n  const e = this.tokenStart;\n  let n, s, r = null, o = null;\n  switch (this.eat(z), n = this.substrToCursor(e + 1), s = n.toLowerCase(), this.skipSC(), this.eof === !1 && this.tokenType !== ht && this.tokenType !== tt && (this.parseAtrulePrelude ? r = this.parseWithFallback(this.AtrulePrelude.bind(this, n, t), Wn) : r = Wn.call(this, this.tokenIndex), this.skipSC()), this.tokenType) {\n    case tt:\n      this.next();\n      break;\n    case ht:\n      hasOwnProperty.call(this.atrule, s) && typeof this.atrule[s].block == \"function\" ? o = this.atrule[s].block.call(this, t) : o = this.Block(ma.call(this));\n      break;\n  }\n  return {\n    type: \"Atrule\",\n    loc: this.getLocation(e, this.tokenStart),\n    name: n,\n    prelude: r,\n    block: o\n  };\n}\nfunction tr(t) {\n  this.token(z, \"@\" + t.name), t.prelude !== null && this.node(t.prelude), t.block ? this.node(t.block) : this.token(tt, \";\");\n}\nconst ba = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: tr,\n  name: ka,\n  parse: Zs,\n  structure: ya,\n  walkContext: Sa\n}, Symbol.toStringTag, { value: \"Module\" })), xa = \"AtrulePrelude\", Ca = \"atrulePrelude\", wa = {\n  children: [[]]\n};\nfunction er(t) {\n  let e = null;\n  return t !== null && (t = t.toLowerCase()), this.skipSC(), hasOwnProperty.call(this.atrule, t) && typeof this.atrule[t].prelude == \"function\" ? e = this.atrule[t].prelude.call(this) : e = this.readSequence(this.scope.AtrulePrelude), this.skipSC(), this.eof !== !0 && this.tokenType !== ht && this.tokenType !== tt && this.error(\"Semicolon or block is expected\"), {\n    type: \"AtrulePrelude\",\n    loc: this.getLocationFromList(e),\n    children: e\n  };\n}\nfunction nr(t) {\n  this.children(t);\n}\nconst Ta = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: nr,\n  name: xa,\n  parse: er,\n  structure: wa,\n  walkContext: Ca\n}, Symbol.toStringTag, { value: \"Module\" })), Aa = 36, sr = 42, Ce = 61, va = 94, ln = 124, Ea = 126;\nfunction $a() {\n  this.eof && this.error(\"Unexpected end of input\");\n  const t = this.tokenStart;\n  let e = !1;\n  return this.isDelim(sr) ? (e = !0, this.next()) : this.isDelim(ln) || this.eat(g), this.isDelim(ln) ? this.charCodeAt(this.tokenStart + 1) !== Ce ? (this.next(), this.eat(g)) : e && this.error(\"Identifier is expected\", this.tokenEnd) : e && this.error(\"Vertical line is expected\"), {\n    type: \"Identifier\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: this.substrToCursor(t)\n  };\n}\nfunction La() {\n  const t = this.tokenStart, e = this.charCodeAt(t);\n  return e !== Ce && // =\n  e !== Ea && // ~=\n  e !== va && // ^=\n  e !== Aa && // $=\n  e !== sr && // *=\n  e !== ln && this.error(\"Attribute selector (=, ~=, ^=, $=, *=, |=) is expected\"), this.next(), e !== Ce && (this.isDelim(Ce) || this.error(\"Equal sign is expected\"), this.next()), this.substrToCursor(t);\n}\nconst Pa = \"AttributeSelector\", Oa = {\n  name: \"Identifier\",\n  matcher: [String, null],\n  value: [\"String\", \"Identifier\", null],\n  flags: [String, null]\n};\nfunction rr() {\n  const t = this.tokenStart;\n  let e, n = null, s = null, r = null;\n  return this.eat(ee), this.skipSC(), e = $a.call(this), this.skipSC(), this.tokenType !== ce && (this.tokenType !== g && (n = La.call(this), this.skipSC(), s = this.tokenType === Tt ? this.String() : this.Identifier(), this.skipSC()), this.tokenType === g && (r = this.consume(g), this.skipSC())), this.eat(ce), {\n    type: \"AttributeSelector\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: e,\n    matcher: n,\n    value: s,\n    flags: r\n  };\n}\nfunction ir(t) {\n  this.token(L, \"[\"), this.node(t.name), t.matcher !== null && (this.tokenize(t.matcher), this.node(t.value)), t.flags !== null && this.token(g, t.flags), this.token(L, \"]\");\n}\nconst Ra = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ir,\n  name: Pa,\n  parse: rr,\n  structure: Oa\n}, Symbol.toStringTag, { value: \"Module\" })), _a = 38;\nfunction or() {\n  return this.Raw(null, !0);\n}\nfunction Un() {\n  return this.parseWithFallback(this.Rule, or);\n}\nfunction zn() {\n  return this.Raw(this.consumeUntilSemicolonIncluded, !0);\n}\nfunction Ia() {\n  if (this.tokenType === tt)\n    return zn.call(this, this.tokenIndex);\n  const t = this.parseWithFallback(this.Declaration, zn);\n  return this.tokenType === tt && this.next(), t;\n}\nconst Na = \"Block\", Da = \"block\", Fa = {\n  children: [[\n    \"Atrule\",\n    \"Rule\",\n    \"Declaration\"\n  ]]\n};\nfunction ar(t) {\n  const e = t ? Ia : Un, n = this.tokenStart;\n  let s = this.createList();\n  this.eat(ht);\n  t:\n    for (; !this.eof; )\n      switch (this.tokenType) {\n        case Yt:\n          break t;\n        case W:\n        case Y:\n          this.next();\n          break;\n        case z:\n          s.push(this.parseWithFallback(this.Atrule.bind(this, t), or));\n          break;\n        default:\n          t && this.isDelim(_a) ? s.push(Un.call(this)) : s.push(e.call(this));\n      }\n  return this.eof || this.eat(Yt), {\n    type: \"Block\",\n    loc: this.getLocation(n, this.tokenStart),\n    children: s\n  };\n}\nfunction lr(t) {\n  this.token(ht, \"{\"), this.children(t, (e) => {\n    e.type === \"Declaration\" && this.token(tt, \";\");\n  }), this.token(Yt, \"}\");\n}\nconst Ma = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: lr,\n  name: Na,\n  parse: ar,\n  structure: Fa,\n  walkContext: Da\n}, Symbol.toStringTag, { value: \"Module\" })), ja = \"Brackets\", Ba = {\n  children: [[]]\n};\nfunction cr(t, e) {\n  const n = this.tokenStart;\n  let s = null;\n  return this.eat(ee), s = t.call(this, e), this.eof || this.eat(ce), {\n    type: \"Brackets\",\n    loc: this.getLocation(n, this.tokenStart),\n    children: s\n  };\n}\nfunction ur(t) {\n  this.token(L, \"[\"), this.children(t), this.token(L, \"]\");\n}\nconst Wa = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ur,\n  name: ja,\n  parse: cr,\n  structure: Ba\n}, Symbol.toStringTag, { value: \"Module\" })), Ua = \"CDC\", za = [];\nfunction hr() {\n  const t = this.tokenStart;\n  return this.eat(nt), {\n    type: \"CDC\",\n    loc: this.getLocation(t, this.tokenStart)\n  };\n}\nfunction fr() {\n  this.token(nt, \"-->\");\n}\nconst Va = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: fr,\n  name: Ua,\n  parse: hr,\n  structure: za\n}, Symbol.toStringTag, { value: \"Module\" })), Ha = \"CDO\", Ga = [];\nfunction pr() {\n  const t = this.tokenStart;\n  return this.eat(De), {\n    type: \"CDO\",\n    loc: this.getLocation(t, this.tokenStart)\n  };\n}\nfunction dr() {\n  this.token(De, \"<!--\");\n}\nconst qa = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: dr,\n  name: Ha,\n  parse: pr,\n  structure: Ga\n}, Symbol.toStringTag, { value: \"Module\" })), Ka = 46, Qa = \"ClassSelector\", Ya = {\n  name: String\n};\nfunction gr() {\n  return this.eatDelim(Ka), {\n    type: \"ClassSelector\",\n    loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),\n    name: this.consume(g)\n  };\n}\nfunction mr(t) {\n  this.token(L, \".\"), this.token(g, t.name);\n}\nconst Xa = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: mr,\n  name: Qa,\n  parse: gr,\n  structure: Ya\n}, Symbol.toStringTag, { value: \"Module\" })), Ja = 43, Vn = 47, Za = 62, tl = 126, el = \"Combinator\", nl = {\n  name: String\n};\nfunction kr() {\n  const t = this.tokenStart;\n  let e;\n  switch (this.tokenType) {\n    case W:\n      e = \" \";\n      break;\n    case L:\n      switch (this.charCodeAt(this.tokenStart)) {\n        case Za:\n        case Ja:\n        case tl:\n          this.next();\n          break;\n        case Vn:\n          this.next(), this.eatIdent(\"deep\"), this.eatDelim(Vn);\n          break;\n        default:\n          this.error(\"Combinator is expected\");\n      }\n      e = this.substrToCursor(t);\n      break;\n  }\n  return {\n    type: \"Combinator\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: e\n  };\n}\nfunction Sr(t) {\n  this.tokenize(t.name);\n}\nconst sl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Sr,\n  name: el,\n  parse: kr,\n  structure: nl\n}, Symbol.toStringTag, { value: \"Module\" })), rl = 42, il = 47, ol = \"Comment\", al = {\n  value: String\n};\nfunction yr() {\n  const t = this.tokenStart;\n  let e = this.tokenEnd;\n  return this.eat(Y), e - t + 2 >= 2 && this.charCodeAt(e - 2) === rl && this.charCodeAt(e - 1) === il && (e -= 2), {\n    type: \"Comment\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: this.substring(t + 2, e)\n  };\n}\nfunction br(t) {\n  this.token(Y, \"/*\" + t.value + \"*/\");\n}\nconst ll = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: br,\n  name: ol,\n  parse: yr,\n  structure: al\n}, Symbol.toStringTag, { value: \"Module\" })), cl = /* @__PURE__ */ new Set([X, S, vt]), ul = \"Condition\", hl = {\n  kind: String,\n  children: [[\n    \"Identifier\",\n    \"Feature\",\n    \"FeatureFunction\",\n    \"FeatureRange\",\n    \"SupportsDeclaration\"\n  ]]\n};\nfunction Hn(t) {\n  return this.lookupTypeNonSC(1) === g && cl.has(this.lookupTypeNonSC(2)) ? this.Feature(t) : this.FeatureRange(t);\n}\nconst fl = {\n  media: Hn,\n  container: Hn,\n  supports() {\n    return this.SupportsDeclaration();\n  }\n};\nfunction xr(t = \"media\") {\n  const e = this.createList();\n  t: for (; !this.eof; )\n    switch (this.tokenType) {\n      case Y:\n      case W:\n        this.next();\n        continue;\n      case g:\n        e.push(this.Identifier());\n        break;\n      case _: {\n        let n = this.parseWithFallback(\n          () => fl[t].call(this, t),\n          () => null\n        );\n        n || (n = this.parseWithFallback(\n          () => {\n            this.eat(_);\n            const s = this.Condition(t);\n            return this.eat(S), s;\n          },\n          () => this.GeneralEnclosed(t)\n        )), e.push(n);\n        break;\n      }\n      case T: {\n        let n = this.parseWithFallback(\n          () => this.FeatureFunction(t),\n          () => null\n        );\n        n || (n = this.GeneralEnclosed(t)), e.push(n);\n        break;\n      }\n      default:\n        break t;\n    }\n  return e.isEmpty && this.error(\"Condition is expected\"), {\n    type: \"Condition\",\n    loc: this.getLocationFromList(e),\n    kind: t,\n    children: e\n  };\n}\nfunction Cr(t) {\n  t.children.forEach((e) => {\n    e.type === \"Condition\" ? (this.token(_, \"(\"), this.node(e), this.token(S, \")\")) : this.node(e);\n  });\n}\nconst pl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Cr,\n  name: ul,\n  parse: xr,\n  structure: hl\n}, Symbol.toStringTag, { value: \"Module\" })), Gn = 45;\nfunction dl(t, e) {\n  return e = e || 0, t.length - e >= 2 && t.charCodeAt(e) === Gn && t.charCodeAt(e + 1) === Gn;\n}\nconst wr = 33, gl = 35, ml = 36, kl = 38, Sl = 42, yl = 43, qn = 47;\nfunction bl() {\n  return this.Raw(this.consumeUntilExclamationMarkOrSemicolon, !0);\n}\nfunction xl() {\n  return this.Raw(this.consumeUntilExclamationMarkOrSemicolon, !1);\n}\nfunction Cl() {\n  const t = this.tokenIndex, e = this.Value();\n  return e.type !== \"Raw\" && this.eof === !1 && this.tokenType !== tt && this.isDelim(wr) === !1 && this.isBalanceEdge(t) === !1 && this.error(), e;\n}\nconst wl = \"Declaration\", Tl = \"declaration\", Al = {\n  important: [Boolean, String],\n  property: String,\n  value: [\"Value\", \"Raw\"]\n};\nfunction Tr() {\n  const t = this.tokenStart, e = this.tokenIndex, n = vl.call(this), s = dl(n), r = s ? this.parseCustomProperty : this.parseValue, o = s ? xl : bl;\n  let a = !1, l;\n  this.skipSC(), this.eat(X);\n  const u = this.tokenIndex;\n  if (s || this.skipSC(), r ? l = this.parseWithFallback(Cl, o) : l = o.call(this, this.tokenIndex), s && l.type === \"Value\" && l.children.isEmpty) {\n    for (let i = u - this.tokenIndex; i <= 0; i++)\n      if (this.lookupType(i) === W) {\n        l.children.appendData({\n          type: \"WhiteSpace\",\n          loc: null,\n          value: \" \"\n        });\n        break;\n      }\n  }\n  return this.isDelim(wr) && (a = El.call(this), this.skipSC()), this.eof === !1 && this.tokenType !== tt && this.isBalanceEdge(e) === !1 && this.error(), {\n    type: \"Declaration\",\n    loc: this.getLocation(t, this.tokenStart),\n    important: a,\n    property: n,\n    value: l\n  };\n}\nfunction Ar(t) {\n  this.token(g, t.property), this.token(X, \":\"), this.node(t.value), t.important && (this.token(L, \"!\"), this.token(g, t.important === !0 ? \"important\" : t.important));\n}\nfunction vl() {\n  const t = this.tokenStart;\n  if (this.tokenType === L)\n    switch (this.charCodeAt(this.tokenStart)) {\n      case Sl:\n      case ml:\n      case yl:\n      case gl:\n      case kl:\n        this.next();\n        break;\n      // TODO: not sure we should support this hack\n      case qn:\n        this.next(), this.isDelim(qn) && this.next();\n        break;\n    }\n  return this.tokenType === I ? this.eat(I) : this.eat(g), this.substrToCursor(t);\n}\nfunction El() {\n  this.eat(L), this.skipSC();\n  const t = this.consume(g);\n  return t === \"important\" ? !0 : t;\n}\nconst $l = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Ar,\n  name: wl,\n  parse: Tr,\n  structure: Al,\n  walkContext: Tl\n}, Symbol.toStringTag, { value: \"Module\" })), Ll = 38;\nfunction Ve() {\n  return this.Raw(this.consumeUntilSemicolonIncluded, !0);\n}\nconst Pl = \"DeclarationList\", Ol = {\n  children: [[\n    \"Declaration\",\n    \"Atrule\",\n    \"Rule\"\n  ]]\n};\nfunction vr() {\n  const t = this.createList();\n  for (; !this.eof; )\n    switch (this.tokenType) {\n      case W:\n      case Y:\n      case tt:\n        this.next();\n        break;\n      case z:\n        t.push(this.parseWithFallback(this.Atrule.bind(this, !0), Ve));\n        break;\n      default:\n        this.isDelim(Ll) ? t.push(this.parseWithFallback(this.Rule, Ve)) : t.push(this.parseWithFallback(this.Declaration, Ve));\n    }\n  return {\n    type: \"DeclarationList\",\n    loc: this.getLocationFromList(t),\n    children: t\n  };\n}\nfunction Er(t) {\n  this.children(t, (e) => {\n    e.type === \"Declaration\" && this.token(tt, \";\");\n  });\n}\nconst Rl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Er,\n  name: Pl,\n  parse: vr,\n  structure: Ol\n}, Symbol.toStringTag, { value: \"Module\" })), _l = \"Dimension\", Il = {\n  value: String,\n  unit: String\n};\nfunction $r() {\n  const t = this.tokenStart, e = this.consumeNumber(E);\n  return {\n    type: \"Dimension\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: e,\n    unit: this.substring(t + e.length, this.tokenStart)\n  };\n}\nfunction Lr(t) {\n  this.token(E, t.value + t.unit);\n}\nconst Nl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Lr,\n  name: _l,\n  parse: $r,\n  structure: Il\n}, Symbol.toStringTag, { value: \"Module\" })), Dl = 47, Fl = \"Feature\", Ml = {\n  kind: String,\n  name: String,\n  value: [\"Identifier\", \"Number\", \"Dimension\", \"Ratio\", \"Function\", null]\n};\nfunction Pr(t) {\n  const e = this.tokenStart;\n  let n, s = null;\n  if (this.eat(_), this.skipSC(), n = this.consume(g), this.skipSC(), this.tokenType !== S) {\n    switch (this.eat(X), this.skipSC(), this.tokenType) {\n      case b:\n        this.lookupNonWSType(1) === L ? s = this.Ratio() : s = this.Number();\n        break;\n      case E:\n        s = this.Dimension();\n        break;\n      case g:\n        s = this.Identifier();\n        break;\n      case T:\n        s = this.parseWithFallback(\n          () => {\n            const r = this.Function(this.readSequence, this.scope.Value);\n            return this.skipSC(), this.isDelim(Dl) && this.error(), r;\n          },\n          () => this.Ratio()\n        );\n        break;\n      default:\n        this.error(\"Number, dimension, ratio or identifier is expected\");\n    }\n    this.skipSC();\n  }\n  return this.eof || this.eat(S), {\n    type: \"Feature\",\n    loc: this.getLocation(e, this.tokenStart),\n    kind: t,\n    name: n,\n    value: s\n  };\n}\nfunction Or(t) {\n  this.token(_, \"(\"), this.token(g, t.name), t.value !== null && (this.token(X, \":\"), this.node(t.value)), this.token(S, \")\");\n}\nconst jl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Or,\n  name: Fl,\n  parse: Pr,\n  structure: Ml\n}, Symbol.toStringTag, { value: \"Module\" })), Bl = \"FeatureFunction\", Wl = {\n  kind: String,\n  feature: String,\n  value: [\"Declaration\", \"Selector\"]\n};\nfunction Ul(t, e) {\n  const s = (this.features[t] || {})[e];\n  return typeof s != \"function\" && this.error(`Unknown feature ${e}()`), s;\n}\nfunction Rr(t = \"unknown\") {\n  const e = this.tokenStart, n = this.consumeFunctionName(), s = Ul.call(this, t, n.toLowerCase());\n  this.skipSC();\n  const r = this.parseWithFallback(\n    () => {\n      const o = this.tokenIndex, a = s.call(this);\n      return this.eof === !1 && this.isBalanceEdge(o) === !1 && this.error(), a;\n    },\n    () => this.Raw(null, !1)\n  );\n  return this.eof || this.eat(S), {\n    type: \"FeatureFunction\",\n    loc: this.getLocation(e, this.tokenStart),\n    kind: t,\n    feature: n,\n    value: r\n  };\n}\nfunction _r(t) {\n  this.token(T, t.feature + \"(\"), this.node(t.value), this.token(S, \")\");\n}\nconst zl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: _r,\n  name: Bl,\n  parse: Rr,\n  structure: Wl\n}, Symbol.toStringTag, { value: \"Module\" })), Kn = 47, Vl = 60, Qn = 61, Hl = 62, Gl = \"FeatureRange\", ql = {\n  kind: String,\n  left: [\"Identifier\", \"Number\", \"Dimension\", \"Ratio\", \"Function\"],\n  leftComparison: String,\n  middle: [\"Identifier\", \"Number\", \"Dimension\", \"Ratio\", \"Function\"],\n  rightComparison: [String, null],\n  right: [\"Identifier\", \"Number\", \"Dimension\", \"Ratio\", \"Function\", null]\n};\nfunction He() {\n  switch (this.skipSC(), this.tokenType) {\n    case b:\n      return this.isDelim(Kn, this.lookupOffsetNonSC(1)) ? this.Ratio() : this.Number();\n    case E:\n      return this.Dimension();\n    case g:\n      return this.Identifier();\n    case T:\n      return this.parseWithFallback(\n        () => {\n          const t = this.Function(this.readSequence, this.scope.Value);\n          return this.skipSC(), this.isDelim(Kn) && this.error(), t;\n        },\n        () => this.Ratio()\n      );\n    default:\n      this.error(\"Number, dimension, ratio or identifier is expected\");\n  }\n}\nfunction Yn(t) {\n  if (this.skipSC(), this.isDelim(Vl) || this.isDelim(Hl)) {\n    const e = this.source[this.tokenStart];\n    return this.next(), this.isDelim(Qn) ? (this.next(), e + \"=\") : e;\n  }\n  if (this.isDelim(Qn))\n    return \"=\";\n  this.error(`Expected ${t ? '\":\", ' : \"\"}\"<\", \">\", \"=\" or \")\"`);\n}\nfunction Ir(t = \"unknown\") {\n  const e = this.tokenStart;\n  this.skipSC(), this.eat(_);\n  const n = He.call(this), s = Yn.call(this, n.type === \"Identifier\"), r = He.call(this);\n  let o = null, a = null;\n  return this.lookupNonWSType(0) !== S && (o = Yn.call(this), a = He.call(this)), this.skipSC(), this.eat(S), {\n    type: \"FeatureRange\",\n    loc: this.getLocation(e, this.tokenStart),\n    kind: t,\n    left: n,\n    leftComparison: s,\n    middle: r,\n    rightComparison: o,\n    right: a\n  };\n}\nfunction Nr(t) {\n  this.token(_, \"(\"), this.node(t.left), this.tokenize(t.leftComparison), this.node(t.middle), t.right && (this.tokenize(t.rightComparison), this.node(t.right)), this.token(S, \")\");\n}\nconst Kl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Nr,\n  name: Gl,\n  parse: Ir,\n  structure: ql\n}, Symbol.toStringTag, { value: \"Module\" })), Ql = \"Function\", Yl = \"function\", Xl = {\n  name: String,\n  children: [[]]\n};\nfunction Dr(t, e) {\n  const n = this.tokenStart, s = this.consumeFunctionName(), r = s.toLowerCase();\n  let o;\n  return o = e.hasOwnProperty(r) ? e[r].call(this, e) : t.call(this, e), this.eof || this.eat(S), {\n    type: \"Function\",\n    loc: this.getLocation(n, this.tokenStart),\n    name: s,\n    children: o\n  };\n}\nfunction Fr(t) {\n  this.token(T, t.name + \"(\"), this.children(t), this.token(S, \")\");\n}\nconst Jl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Fr,\n  name: Ql,\n  parse: Dr,\n  structure: Xl,\n  walkContext: Yl\n}, Symbol.toStringTag, { value: \"Module\" })), Zl = \"GeneralEnclosed\", tc = {\n  kind: String,\n  function: [String, null],\n  children: [[]]\n};\nfunction Mr(t) {\n  const e = this.tokenStart;\n  let n = null;\n  this.tokenType === T ? n = this.consumeFunctionName() : this.eat(_);\n  const s = this.parseWithFallback(\n    () => {\n      const r = this.tokenIndex, o = this.readSequence(this.scope.Value);\n      return this.eof === !1 && this.isBalanceEdge(r) === !1 && this.error(), o;\n    },\n    () => this.createSingleNodeList(\n      this.Raw(null, !1)\n    )\n  );\n  return this.eof || this.eat(S), {\n    type: \"GeneralEnclosed\",\n    loc: this.getLocation(e, this.tokenStart),\n    kind: t,\n    function: n,\n    children: s\n  };\n}\nfunction jr(t) {\n  t.function ? this.token(T, t.function + \"(\") : this.token(_, \"(\"), this.children(t), this.token(S, \")\");\n}\nconst ec = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: jr,\n  name: Zl,\n  parse: Mr,\n  structure: tc\n}, Symbol.toStringTag, { value: \"Module\" })), nc = \"XXX\", sc = \"Hash\", rc = {\n  value: String\n};\nfunction Br() {\n  const t = this.tokenStart;\n  return this.eat(I), {\n    type: \"Hash\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: this.substrToCursor(t + 1)\n  };\n}\nfunction Wr(t) {\n  this.token(I, \"#\" + t.value);\n}\nconst ic = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Wr,\n  name: sc,\n  parse: Br,\n  structure: rc,\n  xxx: nc\n}, Symbol.toStringTag, { value: \"Module\" })), oc = \"Identifier\", ac = {\n  name: String\n};\nfunction Ur() {\n  return {\n    type: \"Identifier\",\n    loc: this.getLocation(this.tokenStart, this.tokenEnd),\n    name: this.consume(g)\n  };\n}\nfunction zr(t) {\n  this.token(g, t.name);\n}\nconst lc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: zr,\n  name: oc,\n  parse: Ur,\n  structure: ac\n}, Symbol.toStringTag, { value: \"Module\" })), cc = \"IdSelector\", uc = {\n  name: String\n};\nfunction Vr() {\n  const t = this.tokenStart;\n  return this.eat(I), {\n    type: \"IdSelector\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: this.substrToCursor(t + 1)\n  };\n}\nfunction Hr(t) {\n  this.token(L, \"#\" + t.name);\n}\nconst hc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Hr,\n  name: cc,\n  parse: Vr,\n  structure: uc\n}, Symbol.toStringTag, { value: \"Module\" })), fc = 46, pc = \"Layer\", dc = {\n  name: String\n};\nfunction Gr() {\n  let t = this.tokenStart, e = this.consume(g);\n  for (; this.isDelim(fc); )\n    this.eat(L), e += \".\" + this.consume(g);\n  return {\n    type: \"Layer\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: e\n  };\n}\nfunction qr(t) {\n  this.tokenize(t.name);\n}\nconst gc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: qr,\n  name: pc,\n  parse: Gr,\n  structure: dc\n}, Symbol.toStringTag, { value: \"Module\" })), mc = \"LayerList\", kc = {\n  children: [[\n    \"Layer\"\n  ]]\n};\nfunction Kr() {\n  const t = this.createList();\n  for (this.skipSC(); !this.eof && (t.push(this.Layer()), this.lookupTypeNonSC(0) === ft); )\n    this.skipSC(), this.next(), this.skipSC();\n  return {\n    type: \"LayerList\",\n    loc: this.getLocationFromList(t),\n    children: t\n  };\n}\nfunction Qr(t) {\n  this.children(t, () => this.token(ft, \",\"));\n}\nconst Sc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Qr,\n  name: mc,\n  parse: Kr,\n  structure: kc\n}, Symbol.toStringTag, { value: \"Module\" })), yc = \"MediaQuery\", bc = {\n  modifier: [String, null],\n  mediaType: [String, null],\n  condition: [\"Condition\", null]\n};\nfunction Yr() {\n  const t = this.tokenStart;\n  let e = null, n = null, s = null;\n  if (this.skipSC(), this.tokenType === g && this.lookupTypeNonSC(1) !== _) {\n    const r = this.consume(g), o = r.toLowerCase();\n    switch (o === \"not\" || o === \"only\" ? (this.skipSC(), e = o, n = this.consume(g)) : n = r, this.lookupTypeNonSC(0)) {\n      case g: {\n        this.skipSC(), this.eatIdent(\"and\"), s = this.Condition(\"media\");\n        break;\n      }\n      case ht:\n      case tt:\n      case ft:\n      case vt:\n        break;\n      default:\n        this.error(\"Identifier or parenthesis is expected\");\n    }\n  } else\n    switch (this.tokenType) {\n      case g:\n      case _:\n      case T: {\n        s = this.Condition(\"media\");\n        break;\n      }\n      case ht:\n      case tt:\n      case vt:\n        break;\n      default:\n        this.error(\"Identifier or parenthesis is expected\");\n    }\n  return {\n    type: \"MediaQuery\",\n    loc: this.getLocation(t, this.tokenStart),\n    modifier: e,\n    mediaType: n,\n    condition: s\n  };\n}\nfunction Xr(t) {\n  t.mediaType ? (t.modifier && this.token(g, t.modifier), this.token(g, t.mediaType), t.condition && (this.token(g, \"and\"), this.node(t.condition))) : t.condition && this.node(t.condition);\n}\nconst xc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Xr,\n  name: yc,\n  parse: Yr,\n  structure: bc\n}, Symbol.toStringTag, { value: \"Module\" })), Cc = \"MediaQueryList\", wc = {\n  children: [[\n    \"MediaQuery\"\n  ]]\n};\nfunction Jr() {\n  const t = this.createList();\n  for (this.skipSC(); !this.eof && (t.push(this.MediaQuery()), this.tokenType === ft); )\n    this.next();\n  return {\n    type: \"MediaQueryList\",\n    loc: this.getLocationFromList(t),\n    children: t\n  };\n}\nfunction Zr(t) {\n  this.children(t, () => this.token(ft, \",\"));\n}\nconst Tc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Zr,\n  name: Cc,\n  parse: Jr,\n  structure: wc\n}, Symbol.toStringTag, { value: \"Module\" })), Ac = 38, vc = \"NestingSelector\", Ec = {};\nfunction ti() {\n  const t = this.tokenStart;\n  return this.eatDelim(Ac), {\n    type: \"NestingSelector\",\n    loc: this.getLocation(t, this.tokenStart)\n  };\n}\nfunction ei() {\n  this.token(L, \"&\");\n}\nconst $c = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ei,\n  name: vc,\n  parse: ti,\n  structure: Ec\n}, Symbol.toStringTag, { value: \"Module\" })), Lc = \"Nth\", Pc = {\n  nth: [\"AnPlusB\", \"Identifier\"],\n  selector: [\"SelectorList\", null]\n};\nfunction ni() {\n  this.skipSC();\n  const t = this.tokenStart;\n  let e = t, n = null, s;\n  return this.lookupValue(0, \"odd\") || this.lookupValue(0, \"even\") ? s = this.Identifier() : s = this.AnPlusB(), e = this.tokenStart, this.skipSC(), this.lookupValue(0, \"of\") && (this.next(), n = this.SelectorList(), e = this.tokenStart), {\n    type: \"Nth\",\n    loc: this.getLocation(t, e),\n    nth: s,\n    selector: n\n  };\n}\nfunction si(t) {\n  this.node(t.nth), t.selector !== null && (this.token(g, \"of\"), this.node(t.selector));\n}\nconst Oc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: si,\n  name: Lc,\n  parse: ni,\n  structure: Pc\n}, Symbol.toStringTag, { value: \"Module\" })), Rc = \"Number\", _c = {\n  value: String\n};\nfunction ri() {\n  return {\n    type: \"Number\",\n    loc: this.getLocation(this.tokenStart, this.tokenEnd),\n    value: this.consume(b)\n  };\n}\nfunction ii(t) {\n  this.token(b, t.value);\n}\nconst Ic = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ii,\n  name: Rc,\n  parse: ri,\n  structure: _c\n}, Symbol.toStringTag, { value: \"Module\" })), Nc = \"Operator\", Dc = {\n  value: String\n};\nfunction oi() {\n  const t = this.tokenStart;\n  return this.next(), {\n    type: \"Operator\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: this.substrToCursor(t)\n  };\n}\nfunction ai(t) {\n  this.tokenize(t.value);\n}\nconst Fc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ai,\n  name: Nc,\n  parse: oi,\n  structure: Dc\n}, Symbol.toStringTag, { value: \"Module\" })), Mc = \"Parentheses\", jc = {\n  children: [[]]\n};\nfunction li(t, e) {\n  const n = this.tokenStart;\n  let s = null;\n  return this.eat(_), s = t.call(this, e), this.eof || this.eat(S), {\n    type: \"Parentheses\",\n    loc: this.getLocation(n, this.tokenStart),\n    children: s\n  };\n}\nfunction ci(t) {\n  this.token(_, \"(\"), this.children(t), this.token(S, \")\");\n}\nconst Bc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ci,\n  name: Mc,\n  parse: li,\n  structure: jc\n}, Symbol.toStringTag, { value: \"Module\" })), Wc = \"Percentage\", Uc = {\n  value: String\n};\nfunction ui() {\n  return {\n    type: \"Percentage\",\n    loc: this.getLocation(this.tokenStart, this.tokenEnd),\n    value: this.consumeNumber(F)\n  };\n}\nfunction hi(t) {\n  this.token(F, t.value + \"%\");\n}\nconst zc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: hi,\n  name: Wc,\n  parse: ui,\n  structure: Uc\n}, Symbol.toStringTag, { value: \"Module\" })), Vc = \"PseudoClassSelector\", Hc = \"function\", Gc = {\n  name: String,\n  children: [[\"Raw\"], null]\n};\nfunction fi() {\n  const t = this.tokenStart;\n  let e = null, n, s;\n  return this.eat(X), this.tokenType === T ? (n = this.consumeFunctionName(), s = n.toLowerCase(), this.lookupNonWSType(0) == S ? e = this.createList() : hasOwnProperty.call(this.pseudo, s) ? (this.skipSC(), e = this.pseudo[s].call(this), this.skipSC()) : (e = this.createList(), e.push(\n    this.Raw(null, !1)\n  )), this.eat(S)) : n = this.consume(g), {\n    type: \"PseudoClassSelector\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: n,\n    children: e\n  };\n}\nfunction pi(t) {\n  this.token(X, \":\"), t.children === null ? this.token(g, t.name) : (this.token(T, t.name + \"(\"), this.children(t), this.token(S, \")\"));\n}\nconst qc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: pi,\n  name: Vc,\n  parse: fi,\n  structure: Gc,\n  walkContext: Hc\n}, Symbol.toStringTag, { value: \"Module\" })), Kc = \"PseudoElementSelector\", Qc = \"function\", Yc = {\n  name: String,\n  children: [[\"Raw\"], null]\n};\nfunction di() {\n  const t = this.tokenStart;\n  let e = null, n, s;\n  return this.eat(X), this.eat(X), this.tokenType === T ? (n = this.consumeFunctionName(), s = n.toLowerCase(), this.lookupNonWSType(0) == S ? e = this.createList() : hasOwnProperty.call(this.pseudo, s) ? (this.skipSC(), e = this.pseudo[s].call(this), this.skipSC()) : (e = this.createList(), e.push(\n    this.Raw(null, !1)\n  )), this.eat(S)) : n = this.consume(g), {\n    type: \"PseudoElementSelector\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: n,\n    children: e\n  };\n}\nfunction gi(t) {\n  this.token(X, \":\"), this.token(X, \":\"), t.children === null ? this.token(g, t.name) : (this.token(T, t.name + \"(\"), this.children(t), this.token(S, \")\"));\n}\nconst Xc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: gi,\n  name: Kc,\n  parse: di,\n  structure: Yc,\n  walkContext: Qc\n}, Symbol.toStringTag, { value: \"Module\" })), Xn = 47;\nfunction Jn() {\n  switch (this.skipSC(), this.tokenType) {\n    case b:\n      return this.Number();\n    case T:\n      return this.Function(this.readSequence, this.scope.Value);\n    default:\n      this.error(\"Number of function is expected\");\n  }\n}\nconst Jc = \"Ratio\", Zc = {\n  left: [\"Number\", \"Function\"],\n  right: [\"Number\", \"Function\", null]\n};\nfunction mi() {\n  const t = this.tokenStart, e = Jn.call(this);\n  let n = null;\n  return this.skipSC(), this.isDelim(Xn) && (this.eatDelim(Xn), n = Jn.call(this)), {\n    type: \"Ratio\",\n    loc: this.getLocation(t, this.tokenStart),\n    left: e,\n    right: n\n  };\n}\nfunction ki(t) {\n  this.node(t.left), this.token(L, \"/\"), t.right ? this.node(t.right) : this.node(b, 1);\n}\nconst tu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: ki,\n  name: Jc,\n  parse: mi,\n  structure: Zc\n}, Symbol.toStringTag, { value: \"Module\" }));\nfunction eu() {\n  return this.tokenIndex > 0 && this.lookupType(-1) === W ? this.tokenIndex > 1 ? this.getTokenStart(this.tokenIndex - 1) : this.firstCharOffset : this.tokenStart;\n}\nconst nu = \"Raw\", su = {\n  value: String\n};\nfunction Si(t, e) {\n  const n = this.getTokenStart(this.tokenIndex);\n  let s;\n  return this.skipUntilBalanced(this.tokenIndex, t || this.consumeUntilBalanceEnd), e && this.tokenStart > n ? s = eu.call(this) : s = this.tokenStart, {\n    type: \"Raw\",\n    loc: this.getLocation(n, s),\n    value: this.substring(n, s)\n  };\n}\nfunction yi(t) {\n  this.tokenize(t.value);\n}\nconst ru = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: yi,\n  name: nu,\n  parse: Si,\n  structure: su\n}, Symbol.toStringTag, { value: \"Module\" }));\nfunction Zn() {\n  return this.Raw(this.consumeUntilLeftCurlyBracket, !0);\n}\nfunction iu() {\n  const t = this.SelectorList();\n  return t.type !== \"Raw\" && this.eof === !1 && this.tokenType !== ht && this.error(), t;\n}\nconst ou = \"Rule\", au = \"rule\", lu = {\n  prelude: [\"SelectorList\", \"Raw\"],\n  block: [\"Block\"]\n};\nfunction bi() {\n  const t = this.tokenIndex, e = this.tokenStart;\n  let n, s;\n  return this.parseRulePrelude ? n = this.parseWithFallback(iu, Zn) : n = Zn.call(this, t), s = this.Block(!0), {\n    type: \"Rule\",\n    loc: this.getLocation(e, this.tokenStart),\n    prelude: n,\n    block: s\n  };\n}\nfunction xi(t) {\n  this.node(t.prelude), this.node(t.block);\n}\nconst cu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: xi,\n  name: ou,\n  parse: bi,\n  structure: lu,\n  walkContext: au\n}, Symbol.toStringTag, { value: \"Module\" })), uu = \"Scope\", hu = {\n  root: [\"SelectorList\", \"Raw\", null],\n  limit: [\"SelectorList\", \"Raw\", null]\n};\nfunction Ci() {\n  let t = null, e = null;\n  this.skipSC();\n  const n = this.tokenStart;\n  return this.tokenType === _ && (this.next(), this.skipSC(), t = this.parseWithFallback(\n    this.SelectorList,\n    () => this.Raw(!1, !0)\n  ), this.skipSC(), this.eat(S)), this.lookupNonWSType(0) === g && (this.skipSC(), this.eatIdent(\"to\"), this.skipSC(), this.eat(_), this.skipSC(), e = this.parseWithFallback(\n    this.SelectorList,\n    () => this.Raw(!1, !0)\n  ), this.skipSC(), this.eat(S)), {\n    type: \"Scope\",\n    loc: this.getLocation(n, this.tokenStart),\n    root: t,\n    limit: e\n  };\n}\nfunction wi(t) {\n  t.root && (this.token(_, \"(\"), this.node(t.root), this.token(S, \")\")), t.limit && (this.token(g, \"to\"), this.token(_, \"(\"), this.node(t.limit), this.token(S, \")\"));\n}\nconst fu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: wi,\n  name: uu,\n  parse: Ci,\n  structure: hu\n}, Symbol.toStringTag, { value: \"Module\" })), pu = \"Selector\", du = {\n  children: [[\n    \"TypeSelector\",\n    \"IdSelector\",\n    \"ClassSelector\",\n    \"AttributeSelector\",\n    \"PseudoClassSelector\",\n    \"PseudoElementSelector\",\n    \"Combinator\"\n  ]]\n};\nfunction Ti() {\n  const t = this.readSequence(this.scope.Selector);\n  return this.getFirstListNode(t) === null && this.error(\"Selector is expected\"), {\n    type: \"Selector\",\n    loc: this.getLocationFromList(t),\n    children: t\n  };\n}\nfunction Ai(t) {\n  this.children(t);\n}\nconst gu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Ai,\n  name: pu,\n  parse: Ti,\n  structure: du\n}, Symbol.toStringTag, { value: \"Module\" })), mu = \"SelectorList\", ku = \"selector\", Su = {\n  children: [[\n    \"Selector\",\n    \"Raw\"\n  ]]\n};\nfunction vi() {\n  const t = this.createList();\n  for (; !this.eof; ) {\n    if (t.push(this.Selector()), this.tokenType === ft) {\n      this.next();\n      continue;\n    }\n    break;\n  }\n  return {\n    type: \"SelectorList\",\n    loc: this.getLocationFromList(t),\n    children: t\n  };\n}\nfunction Ei(t) {\n  this.children(t, () => this.token(ft, \",\"));\n}\nconst yu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Ei,\n  name: mu,\n  parse: vi,\n  structure: Su,\n  walkContext: ku\n}, Symbol.toStringTag, { value: \"Module\" })), cn = 92, $i = 34, bu = 39;\nfunction Li(t) {\n  const e = t.length, n = t.charCodeAt(0), s = n === $i || n === bu ? 1 : 0, r = s === 1 && e > 1 && t.charCodeAt(e - 1) === n ? e - 2 : e - 1;\n  let o = \"\";\n  for (let a = s; a <= r; a++) {\n    let l = t.charCodeAt(a);\n    if (l === cn) {\n      if (a === r) {\n        a !== e - 1 && (o = t.substr(a + 1));\n        break;\n      }\n      if (l = t.charCodeAt(++a), kt(cn, l)) {\n        const u = a - 1, i = Jt(t, u);\n        a = i - 1, o += Ks(t.substring(u + 1, i));\n      } else\n        l === 13 && t.charCodeAt(a + 1) === 10 && a++;\n    } else\n      o += t[a];\n  }\n  return o;\n}\nfunction xu(t, e) {\n  const s = $i;\n  let r = \"\", o = !1;\n  for (let a = 0; a < t.length; a++) {\n    const l = t.charCodeAt(a);\n    if (l === 0) {\n      r += \"�\";\n      continue;\n    }\n    if (l <= 31 || l === 127) {\n      r += \"\\\\\" + l.toString(16), o = !0;\n      continue;\n    }\n    l === s || l === cn ? (r += \"\\\\\" + t.charAt(a), o = !1) : (o && (Xt(l) || Ft(l)) && (r += \" \"), r += t.charAt(a), o = !1);\n  }\n  return '\"' + r + '\"';\n}\nconst Cu = \"String\", wu = {\n  value: String\n};\nfunction Pi() {\n  return {\n    type: \"String\",\n    loc: this.getLocation(this.tokenStart, this.tokenEnd),\n    value: Li(this.consume(Tt))\n  };\n}\nfunction Oi(t) {\n  this.token(Tt, xu(t.value));\n}\nconst Tu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Oi,\n  name: Cu,\n  parse: Pi,\n  structure: wu\n}, Symbol.toStringTag, { value: \"Module\" })), Au = 33;\nfunction ts() {\n  return this.Raw(null, !1);\n}\nconst vu = \"StyleSheet\", Eu = \"stylesheet\", $u = {\n  children: [[\n    \"Comment\",\n    \"CDO\",\n    \"CDC\",\n    \"Atrule\",\n    \"Rule\",\n    \"Raw\"\n  ]]\n};\nfunction Ri() {\n  const t = this.tokenStart, e = this.createList();\n  let n;\n  for (; !this.eof; ) {\n    switch (this.tokenType) {\n      case W:\n        this.next();\n        continue;\n      case Y:\n        if (this.charCodeAt(this.tokenStart + 2) !== Au) {\n          this.next();\n          continue;\n        }\n        n = this.Comment();\n        break;\n      case De:\n        n = this.CDO();\n        break;\n      case nt:\n        n = this.CDC();\n        break;\n      // CSS Syntax Module Level 3\n      // §2.2 Error handling\n      // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n      case z:\n        n = this.parseWithFallback(this.Atrule, ts);\n        break;\n      // Anything else starts a qualified rule ...\n      default:\n        n = this.parseWithFallback(this.Rule, ts);\n    }\n    e.push(n);\n  }\n  return {\n    type: \"StyleSheet\",\n    loc: this.getLocation(t, this.tokenStart),\n    children: e\n  };\n}\nfunction _i(t) {\n  this.children(t);\n}\nconst Lu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: _i,\n  name: vu,\n  parse: Ri,\n  structure: $u,\n  walkContext: Eu\n}, Symbol.toStringTag, { value: \"Module\" })), Pu = \"SupportsDeclaration\", Ou = {\n  declaration: \"Declaration\"\n};\nfunction Ii() {\n  const t = this.tokenStart;\n  this.eat(_), this.skipSC();\n  const e = this.Declaration();\n  return this.eof || this.eat(S), {\n    type: \"SupportsDeclaration\",\n    loc: this.getLocation(t, this.tokenStart),\n    declaration: e\n  };\n}\nfunction Ni(t) {\n  this.token(_, \"(\"), this.node(t.declaration), this.token(S, \")\");\n}\nconst Ru = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Ni,\n  name: Pu,\n  parse: Ii,\n  structure: Ou\n}, Symbol.toStringTag, { value: \"Module\" })), _u = 42, es = 124;\nfunction Ge() {\n  this.tokenType !== g && this.isDelim(_u) === !1 && this.error(\"Identifier or asterisk is expected\"), this.next();\n}\nconst Iu = \"TypeSelector\", Nu = {\n  name: String\n};\nfunction Di() {\n  const t = this.tokenStart;\n  return this.isDelim(es) ? (this.next(), Ge.call(this)) : (Ge.call(this), this.isDelim(es) && (this.next(), Ge.call(this))), {\n    type: \"TypeSelector\",\n    loc: this.getLocation(t, this.tokenStart),\n    name: this.substrToCursor(t)\n  };\n}\nfunction Fi(t) {\n  this.tokenize(t.name);\n}\nconst Du = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Fi,\n  name: Iu,\n  parse: Di,\n  structure: Nu\n}, Symbol.toStringTag, { value: \"Module\" })), Mi = 43, ji = 45, un = 63;\nfunction se(t, e) {\n  let n = 0;\n  for (let s = this.tokenStart + t; s < this.tokenEnd; s++) {\n    const r = this.charCodeAt(s);\n    if (r === ji && e && n !== 0)\n      return se.call(this, t + n + 1, !1), -1;\n    Xt(r) || this.error(\n      e && n !== 0 ? \"Hyphen minus\" + (n < 6 ? \" or hex digit\" : \"\") + \" is expected\" : n < 6 ? \"Hex digit is expected\" : \"Unexpected input\",\n      s\n    ), ++n > 6 && this.error(\"Too many hex digits\", s);\n  }\n  return this.next(), n;\n}\nfunction me(t) {\n  let e = 0;\n  for (; this.isDelim(un); )\n    ++e > t && this.error(\"Too many question marks\"), this.next();\n}\nfunction Fu(t) {\n  this.charCodeAt(this.tokenStart) !== t && this.error((t === Mi ? \"Plus sign\" : \"Hyphen minus\") + \" is expected\");\n}\nfunction Mu() {\n  let t = 0;\n  switch (this.tokenType) {\n    case b:\n      if (t = se.call(this, 1, !0), this.isDelim(un)) {\n        me.call(this, 6 - t);\n        break;\n      }\n      if (this.tokenType === E || this.tokenType === b) {\n        Fu.call(this, ji), se.call(this, 1, !1);\n        break;\n      }\n      break;\n    case E:\n      t = se.call(this, 1, !0), t > 0 && me.call(this, 6 - t);\n      break;\n    default:\n      if (this.eatDelim(Mi), this.tokenType === g) {\n        t = se.call(this, 0, !0), t > 0 && me.call(this, 6 - t);\n        break;\n      }\n      if (this.isDelim(un)) {\n        this.next(), me.call(this, 5);\n        break;\n      }\n      this.error(\"Hex digit or question mark is expected\");\n  }\n}\nconst ju = \"UnicodeRange\", Bu = {\n  value: String\n};\nfunction Bi() {\n  const t = this.tokenStart;\n  return this.eatIdent(\"u\"), Mu.call(this), {\n    type: \"UnicodeRange\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: this.substrToCursor(t)\n  };\n}\nfunction Wi(t) {\n  this.tokenize(t.value);\n}\nconst Wu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Wi,\n  name: ju,\n  parse: Bi,\n  structure: Bu\n}, Symbol.toStringTag, { value: \"Module\" })), Uu = 32, hn = 92, zu = 34, Vu = 39, Hu = 40, Ui = 41;\nfunction Gu(t) {\n  const e = t.length;\n  let n = 4, s = t.charCodeAt(e - 1) === Ui ? e - 2 : e - 1, r = \"\";\n  for (; n < s && Ft(t.charCodeAt(n)); )\n    n++;\n  for (; n < s && Ft(t.charCodeAt(s)); )\n    s--;\n  for (let o = n; o <= s; o++) {\n    let a = t.charCodeAt(o);\n    if (a === hn) {\n      if (o === s) {\n        o !== e - 1 && (r = t.substr(o + 1));\n        break;\n      }\n      if (a = t.charCodeAt(++o), kt(hn, a)) {\n        const l = o - 1, u = Jt(t, l);\n        o = u - 1, r += Ks(t.substring(l + 1, u));\n      } else\n        a === 13 && t.charCodeAt(o + 1) === 10 && o++;\n    } else\n      r += t[o];\n  }\n  return r;\n}\nfunction qu(t) {\n  let e = \"\", n = !1;\n  for (let s = 0; s < t.length; s++) {\n    const r = t.charCodeAt(s);\n    if (r === 0) {\n      e += \"�\";\n      continue;\n    }\n    if (r <= 31 || r === 127) {\n      e += \"\\\\\" + r.toString(16), n = !0;\n      continue;\n    }\n    r === Uu || r === hn || r === zu || r === Vu || r === Hu || r === Ui ? (e += \"\\\\\" + t.charAt(s), n = !1) : (n && Xt(r) && (e += \" \"), e += t.charAt(s), n = !1);\n  }\n  return \"url(\" + e + \")\";\n}\nconst Ku = \"Url\", Qu = {\n  value: String\n};\nfunction zi() {\n  const t = this.tokenStart;\n  let e;\n  switch (this.tokenType) {\n    case Q:\n      e = Gu(this.consume(Q));\n      break;\n    case T:\n      this.cmpStr(this.tokenStart, this.tokenEnd, \"url(\") || this.error(\"Function name must be `url`\"), this.eat(T), this.skipSC(), e = Li(this.consume(Tt)), this.skipSC(), this.eof || this.eat(S);\n      break;\n    default:\n      this.error(\"Url or Function is expected\");\n  }\n  return {\n    type: \"Url\",\n    loc: this.getLocation(t, this.tokenStart),\n    value: e\n  };\n}\nfunction Vi(t) {\n  this.token(Q, qu(t.value));\n}\nconst Yu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Vi,\n  name: Ku,\n  parse: zi,\n  structure: Qu\n}, Symbol.toStringTag, { value: \"Module\" })), Xu = \"Value\", Ju = {\n  children: [[]]\n};\nfunction Hi() {\n  const t = this.tokenStart, e = this.readSequence(this.scope.Value);\n  return {\n    type: \"Value\",\n    loc: this.getLocation(t, this.tokenStart),\n    children: e\n  };\n}\nfunction Gi(t) {\n  this.children(t);\n}\nconst Zu = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Gi,\n  name: Xu,\n  parse: Hi,\n  structure: Ju\n}, Symbol.toStringTag, { value: \"Module\" })), th = Object.freeze({\n  type: \"WhiteSpace\",\n  loc: null,\n  value: \" \"\n}), eh = \"WhiteSpace\", nh = {\n  value: String\n};\nfunction qi() {\n  return this.eat(W), th;\n}\nfunction Ki(t) {\n  this.token(W, t.value);\n}\nconst sh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  generate: Ki,\n  name: eh,\n  parse: qi,\n  structure: nh\n}, Symbol.toStringTag, { value: \"Module\" })), rh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AnPlusB: ga,\n  Atrule: ba,\n  AtrulePrelude: Ta,\n  AttributeSelector: Ra,\n  Block: Ma,\n  Brackets: Wa,\n  CDC: Va,\n  CDO: qa,\n  ClassSelector: Xa,\n  Combinator: sl,\n  Comment: ll,\n  Condition: pl,\n  Declaration: $l,\n  DeclarationList: Rl,\n  Dimension: Nl,\n  Feature: jl,\n  FeatureFunction: zl,\n  FeatureRange: Kl,\n  Function: Jl,\n  GeneralEnclosed: ec,\n  Hash: ic,\n  IdSelector: hc,\n  Identifier: lc,\n  Layer: gc,\n  LayerList: Sc,\n  MediaQuery: xc,\n  MediaQueryList: Tc,\n  NestingSelector: $c,\n  Nth: Oc,\n  Number: Ic,\n  Operator: Fc,\n  Parentheses: Bc,\n  Percentage: zc,\n  PseudoClassSelector: qc,\n  PseudoElementSelector: Xc,\n  Ratio: tu,\n  Raw: ru,\n  Rule: cu,\n  Scope: fu,\n  Selector: gu,\n  SelectorList: yu,\n  String: Tu,\n  StyleSheet: Lu,\n  SupportsDeclaration: Ru,\n  TypeSelector: Du,\n  UnicodeRange: Wu,\n  Url: Yu,\n  Value: Zu,\n  WhiteSpace: sh\n}, Symbol.toStringTag, { value: \"Module\" })), ih = {\n  node: rh\n}, $t = Zo(ih), wn = [\n  \"left\",\n  \"right\",\n  \"top\",\n  \"bottom\",\n  \"inset-block-start\",\n  \"inset-block-end\",\n  \"inset-inline-start\",\n  \"inset-inline-end\",\n  \"inset-block\",\n  \"inset-inline\",\n  \"inset\"\n];\nfunction ue(t) {\n  return wn.includes(t);\n}\nconst Tn = [\n  \"margin-block-start\",\n  \"margin-block-end\",\n  \"margin-block\",\n  \"margin-inline-start\",\n  \"margin-inline-end\",\n  \"margin-inline\",\n  \"margin-bottom\",\n  \"margin-left\",\n  \"margin-right\",\n  \"margin-top\",\n  \"margin\"\n];\nfunction oh(t) {\n  return Tn.includes(t);\n}\nconst An = [\n  \"width\",\n  \"height\",\n  \"min-width\",\n  \"min-height\",\n  \"max-width\",\n  \"max-height\",\n  \"block-size\",\n  \"inline-size\",\n  \"min-block-size\",\n  \"min-inline-size\",\n  \"max-block-size\",\n  \"max-inline-size\"\n];\nfunction Qi(t) {\n  return An.includes(t);\n}\nconst Yi = [\n  \"justify-self\",\n  \"align-self\",\n  \"place-self\"\n];\nfunction ah(t) {\n  return Yi.includes(t);\n}\nconst Xi = [\n  ...wn,\n  ...Tn,\n  ...An,\n  ...Yi,\n  \"position-anchor\",\n  \"position-area\"\n], lh = [\n  ...An,\n  ...wn,\n  ...Tn\n];\nfunction Ji(t) {\n  return lh.includes(\n    t\n  );\n}\nconst ch = [\n  \"top\",\n  \"left\",\n  \"right\",\n  \"bottom\",\n  \"start\",\n  \"end\",\n  \"self-start\",\n  \"self-end\",\n  \"center\",\n  \"inside\",\n  \"outside\"\n];\nfunction Zi(t) {\n  return ch.includes(t);\n}\nconst uh = [\n  \"width\",\n  \"height\",\n  \"block\",\n  \"inline\",\n  \"self-block\",\n  \"self-inline\"\n];\nfunction hh(t) {\n  return uh.includes(t);\n}\nconst ns = /* @__PURE__ */ new Set([\"Atrule\", \"Selector\", \"Declaration\"]);\nfunction fh(t) {\n  const e = new SourceMapGenerator(), n = {\n    line: 1,\n    column: 0\n  }, s = {\n    line: 0,\n    // should be zero to add first mapping\n    column: 0\n  }, r = {\n    line: 1,\n    column: 0\n  }, o = {\n    generated: r\n  };\n  let a = 1, l = 0, u = !1;\n  const i = t.node;\n  t.node = function(f) {\n    if (f.loc && f.loc.start && ns.has(f.type)) {\n      const p = f.loc.start.line, d = f.loc.start.column - 1;\n      (s.line !== p || s.column !== d) && (s.line = p, s.column = d, n.line = a, n.column = l, u && (u = !1, (n.line !== r.line || n.column !== r.column) && e.addMapping(o)), u = !0, e.addMapping({\n        source: f.loc.source,\n        original: s,\n        generated: n\n      }));\n    }\n    i.call(this, f), u && ns.has(f.type) && (r.line = a, r.column = l);\n  };\n  const c = t.emit;\n  t.emit = function(f, p, d) {\n    for (let m = 0; m < f.length; m++)\n      f.charCodeAt(m) === 10 ? (a++, l = 0) : l++;\n    c(f, p, d);\n  };\n  const h = t.result;\n  return t.result = function() {\n    return u && e.addMapping(o), {\n      css: h(),\n      map: e\n    };\n  }, t;\n}\nconst ph = 43, dh = 45, qe = (t, e) => {\n  if (t === L && (t = e), typeof t == \"string\") {\n    const n = t.charCodeAt(0);\n    return n > 127 ? 32768 : n << 8;\n  }\n  return t;\n}, to = [\n  [g, g],\n  [g, T],\n  [g, Q],\n  [g, at],\n  [g, \"-\"],\n  [g, b],\n  [g, F],\n  [g, E],\n  [g, nt],\n  [g, _],\n  [z, g],\n  [z, T],\n  [z, Q],\n  [z, at],\n  [z, \"-\"],\n  [z, b],\n  [z, F],\n  [z, E],\n  [z, nt],\n  [I, g],\n  [I, T],\n  [I, Q],\n  [I, at],\n  [I, \"-\"],\n  [I, b],\n  [I, F],\n  [I, E],\n  [I, nt],\n  [E, g],\n  [E, T],\n  [E, Q],\n  [E, at],\n  [E, \"-\"],\n  [E, b],\n  [E, F],\n  [E, E],\n  [E, nt],\n  [\"#\", g],\n  [\"#\", T],\n  [\"#\", Q],\n  [\"#\", at],\n  [\"#\", \"-\"],\n  [\"#\", b],\n  [\"#\", F],\n  [\"#\", E],\n  [\"#\", nt],\n  // https://github.com/w3c/csswg-drafts/pull/6874\n  [\"-\", g],\n  [\"-\", T],\n  [\"-\", Q],\n  [\"-\", at],\n  [\"-\", \"-\"],\n  [\"-\", b],\n  [\"-\", F],\n  [\"-\", E],\n  [\"-\", nt],\n  // https://github.com/w3c/csswg-drafts/pull/6874\n  [b, g],\n  [b, T],\n  [b, Q],\n  [b, at],\n  [b, b],\n  [b, F],\n  [b, E],\n  [b, \"%\"],\n  [b, nt],\n  // https://github.com/w3c/csswg-drafts/pull/6874\n  [\"@\", g],\n  [\"@\", T],\n  [\"@\", Q],\n  [\"@\", at],\n  [\"@\", \"-\"],\n  [\"@\", nt],\n  // https://github.com/w3c/csswg-drafts/pull/6874\n  [\".\", b],\n  [\".\", F],\n  [\".\", E],\n  [\"+\", b],\n  [\"+\", F],\n  [\"+\", E],\n  [\"/\", \"*\"]\n], gh = to.concat([\n  [g, I],\n  [E, I],\n  [I, I],\n  [z, _],\n  [z, Tt],\n  [z, X],\n  [F, F],\n  [F, E],\n  [F, T],\n  [F, \"-\"],\n  [S, g],\n  [S, T],\n  [S, F],\n  [S, E],\n  [S, I],\n  [S, \"-\"]\n]);\nfunction eo(t) {\n  const e = new Set(\n    t.map(([n, s]) => qe(n) << 16 | qe(s))\n  );\n  return function(n, s, r) {\n    const o = qe(s, r), a = r.charCodeAt(0);\n    return (a === dh && s !== g && s !== T && s !== nt || a === ph ? e.has(n << 16 | a << 8) : e.has(n << 16 | o)) && this.emit(\" \", W, !0), o;\n  };\n}\nconst mh = eo(to), no = eo(gh), ss = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  safe: no,\n  spec: mh\n}, Symbol.toStringTag, { value: \"Module\" })), kh = 92;\nfunction Sh(t, e) {\n  if (typeof e == \"function\") {\n    let n = null;\n    t.children.forEach((s) => {\n      n !== null && e.call(this, n), this.node(s), n = s;\n    });\n    return;\n  }\n  t.children.forEach(this.node, this);\n}\nfunction yh(t) {\n  Ys(t, (e, n, s) => {\n    this.token(e, t.slice(n, s));\n  });\n}\nfunction bh(t) {\n  const e = /* @__PURE__ */ new Map();\n  for (let [n, s] of Object.entries(t.node))\n    typeof (s.generate || s) == \"function\" && e.set(n, s.generate || s);\n  return function(n, s) {\n    let r = \"\", o = 0, a = {\n      node(u) {\n        if (e.has(u.type))\n          e.get(u.type).call(l, u);\n        else\n          throw new Error(\"Unknown node type: \" + u.type);\n      },\n      tokenBefore: no,\n      token(u, i) {\n        o = this.tokenBefore(o, u, i), this.emit(i, u, !1), u === L && i.charCodeAt(0) === kh && this.emit(`\n`, W, !0);\n      },\n      emit(u) {\n        r += u;\n      },\n      result() {\n        return r;\n      }\n    };\n    s && (typeof s.decorator == \"function\" && (a = s.decorator(a)), s.sourceMap && (a = fh(a)), s.mode in ss && (a.tokenBefore = ss[s.mode]));\n    const l = {\n      node: (u) => a.node(u),\n      children: Sh,\n      token: (u, i) => a.token(u, i),\n      tokenize: yh\n    };\n    return a.node(n), a.result();\n  };\n}\nconst xh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AnPlusB: Js,\n  Atrule: tr,\n  AtrulePrelude: nr,\n  AttributeSelector: ir,\n  Block: lr,\n  Brackets: ur,\n  CDC: fr,\n  CDO: dr,\n  ClassSelector: mr,\n  Combinator: Sr,\n  Comment: br,\n  Condition: Cr,\n  Declaration: Ar,\n  DeclarationList: Er,\n  Dimension: Lr,\n  Feature: Or,\n  FeatureFunction: _r,\n  FeatureRange: Nr,\n  Function: Fr,\n  GeneralEnclosed: jr,\n  Hash: Wr,\n  IdSelector: Hr,\n  Identifier: zr,\n  Layer: qr,\n  LayerList: Qr,\n  MediaQuery: Xr,\n  MediaQueryList: Zr,\n  NestingSelector: ei,\n  Nth: si,\n  Number: ii,\n  Operator: ai,\n  Parentheses: ci,\n  Percentage: hi,\n  PseudoClassSelector: pi,\n  PseudoElementSelector: gi,\n  Ratio: ki,\n  Raw: yi,\n  Rule: xi,\n  Scope: wi,\n  Selector: Ai,\n  SelectorList: Ei,\n  String: Oi,\n  StyleSheet: _i,\n  SupportsDeclaration: Ni,\n  TypeSelector: Fi,\n  UnicodeRange: Wi,\n  Url: Vi,\n  Value: Gi,\n  WhiteSpace: Ki\n}, Symbol.toStringTag, { value: \"Module\" })), Ch = {\n  node: xh\n}, wh = bh(Ch);\nlet zt = null;\nclass K {\n  static createItem(e) {\n    return {\n      prev: null,\n      next: null,\n      data: e\n    };\n  }\n  constructor() {\n    this.head = null, this.tail = null, this.cursor = null;\n  }\n  createItem(e) {\n    return K.createItem(e);\n  }\n  // cursor helpers\n  allocateCursor(e, n) {\n    let s;\n    return zt !== null ? (s = zt, zt = zt.cursor, s.prev = e, s.next = n, s.cursor = this.cursor) : s = {\n      prev: e,\n      next: n,\n      cursor: this.cursor\n    }, this.cursor = s, s;\n  }\n  releaseCursor() {\n    const { cursor: e } = this;\n    this.cursor = e.cursor, e.prev = null, e.next = null, e.cursor = zt, zt = e;\n  }\n  updateCursors(e, n, s, r) {\n    let { cursor: o } = this;\n    for (; o !== null; )\n      o.prev === e && (o.prev = n), o.next === s && (o.next = r), o = o.cursor;\n  }\n  *[Symbol.iterator]() {\n    for (let e = this.head; e !== null; e = e.next)\n      yield e.data;\n  }\n  // getters\n  get size() {\n    let e = 0;\n    for (let n = this.head; n !== null; n = n.next)\n      e++;\n    return e;\n  }\n  get isEmpty() {\n    return this.head === null;\n  }\n  get first() {\n    return this.head && this.head.data;\n  }\n  get last() {\n    return this.tail && this.tail.data;\n  }\n  // convertors\n  fromArray(e) {\n    let n = null;\n    this.head = null;\n    for (let s of e) {\n      const r = K.createItem(s);\n      n !== null ? n.next = r : this.head = r, r.prev = n, n = r;\n    }\n    return this.tail = n, this;\n  }\n  toArray() {\n    return [...this];\n  }\n  toJSON() {\n    return [...this];\n  }\n  // array-like methods\n  forEach(e, n = this) {\n    const s = this.allocateCursor(null, this.head);\n    for (; s.next !== null; ) {\n      const r = s.next;\n      s.next = r.next, e.call(n, r.data, r, this);\n    }\n    this.releaseCursor();\n  }\n  forEachRight(e, n = this) {\n    const s = this.allocateCursor(this.tail, null);\n    for (; s.prev !== null; ) {\n      const r = s.prev;\n      s.prev = r.prev, e.call(n, r.data, r, this);\n    }\n    this.releaseCursor();\n  }\n  reduce(e, n, s = this) {\n    let r = this.allocateCursor(null, this.head), o = n, a;\n    for (; r.next !== null; )\n      a = r.next, r.next = a.next, o = e.call(s, o, a.data, a, this);\n    return this.releaseCursor(), o;\n  }\n  reduceRight(e, n, s = this) {\n    let r = this.allocateCursor(this.tail, null), o = n, a;\n    for (; r.prev !== null; )\n      a = r.prev, r.prev = a.prev, o = e.call(s, o, a.data, a, this);\n    return this.releaseCursor(), o;\n  }\n  some(e, n = this) {\n    for (let s = this.head; s !== null; s = s.next)\n      if (e.call(n, s.data, s, this))\n        return !0;\n    return !1;\n  }\n  map(e, n = this) {\n    const s = new K();\n    for (let r = this.head; r !== null; r = r.next)\n      s.appendData(e.call(n, r.data, r, this));\n    return s;\n  }\n  filter(e, n = this) {\n    const s = new K();\n    for (let r = this.head; r !== null; r = r.next)\n      e.call(n, r.data, r, this) && s.appendData(r.data);\n    return s;\n  }\n  nextUntil(e, n, s = this) {\n    if (e === null)\n      return;\n    const r = this.allocateCursor(null, e);\n    for (; r.next !== null; ) {\n      const o = r.next;\n      if (r.next = o.next, n.call(s, o.data, o, this))\n        break;\n    }\n    this.releaseCursor();\n  }\n  prevUntil(e, n, s = this) {\n    if (e === null)\n      return;\n    const r = this.allocateCursor(e, null);\n    for (; r.prev !== null; ) {\n      const o = r.prev;\n      if (r.prev = o.prev, n.call(s, o.data, o, this))\n        break;\n    }\n    this.releaseCursor();\n  }\n  // mutation\n  clear() {\n    this.head = null, this.tail = null;\n  }\n  copy() {\n    const e = new K();\n    for (let n of this)\n      e.appendData(n);\n    return e;\n  }\n  prepend(e) {\n    return this.updateCursors(null, e, this.head, e), this.head !== null ? (this.head.prev = e, e.next = this.head) : this.tail = e, this.head = e, this;\n  }\n  prependData(e) {\n    return this.prepend(K.createItem(e));\n  }\n  append(e) {\n    return this.insert(e);\n  }\n  appendData(e) {\n    return this.insert(K.createItem(e));\n  }\n  insert(e, n = null) {\n    if (n !== null)\n      if (this.updateCursors(n.prev, e, n, e), n.prev === null) {\n        if (this.head !== n)\n          throw new Error(\"before doesn't belong to list\");\n        this.head = e, n.prev = e, e.next = n, this.updateCursors(null, e);\n      } else\n        n.prev.next = e, e.prev = n.prev, n.prev = e, e.next = n;\n    else\n      this.updateCursors(this.tail, e, null, e), this.tail !== null ? (this.tail.next = e, e.prev = this.tail) : this.head = e, this.tail = e;\n    return this;\n  }\n  insertData(e, n) {\n    return this.insert(K.createItem(e), n);\n  }\n  remove(e) {\n    if (this.updateCursors(e, e.prev, e, e.next), e.prev !== null)\n      e.prev.next = e.next;\n    else {\n      if (this.head !== e)\n        throw new Error(\"item doesn't belong to list\");\n      this.head = e.next;\n    }\n    if (e.next !== null)\n      e.next.prev = e.prev;\n    else {\n      if (this.tail !== e)\n        throw new Error(\"item doesn't belong to list\");\n      this.tail = e.prev;\n    }\n    return e.prev = null, e.next = null, e;\n  }\n  push(e) {\n    this.insert(K.createItem(e));\n  }\n  pop() {\n    return this.tail !== null ? this.remove(this.tail) : null;\n  }\n  unshift(e) {\n    this.prepend(K.createItem(e));\n  }\n  shift() {\n    return this.head !== null ? this.remove(this.head) : null;\n  }\n  prependList(e) {\n    return this.insertList(e, this.head);\n  }\n  appendList(e) {\n    return this.insertList(e);\n  }\n  insertList(e, n) {\n    return e.head === null ? this : (n != null ? (this.updateCursors(n.prev, e.tail, n, e.head), n.prev !== null ? (n.prev.next = e.head, e.head.prev = n.prev) : this.head = e.head, n.prev = e.tail, e.tail.next = n) : (this.updateCursors(this.tail, e.tail, null, e.head), this.tail !== null ? (this.tail.next = e.head, e.head.prev = this.tail) : this.head = e.head, this.tail = e.tail), e.head = null, e.tail = null, this);\n  }\n  replace(e, n) {\n    \"head\" in n ? this.insertList(n, e) : this.insert(n, e), this.remove(e);\n  }\n}\nfunction Th(t, e) {\n  const n = Object.create(SyntaxError.prototype), s = new Error();\n  return Object.assign(n, {\n    name: t,\n    message: e,\n    get stack() {\n      return (s.stack || \"\").replace(/^(.+\\n){1,3}/, `${t}: ${e}\n`);\n    }\n  });\n}\nconst Ke = 100, rs = 60, is = \"    \";\nfunction os({ source: t, line: e, column: n, baseLine: s, baseColumn: r }, o) {\n  function a(d, m) {\n    return i.slice(d, m).map(\n      (k, y) => String(d + y + 1).padStart(f) + \" |\" + k\n    ).join(`\n`);\n  }\n  const l = `\n`.repeat(Math.max(s - 1, 0)), u = \" \".repeat(Math.max(r - 1, 0)), i = (l + u + t).split(/\\r\\n?|\\n|\\f/), c = Math.max(1, e - o) - 1, h = Math.min(e + o, i.length + 1), f = Math.max(4, String(h).length) + 1;\n  let p = 0;\n  n += (is.length - 1) * (i[e - 1].substr(0, n - 1).match(/\\t/g) || []).length, n > Ke && (p = n - rs + 3, n = rs - 2);\n  for (let d = c; d <= h; d++)\n    d >= 0 && d < i.length && (i[d] = i[d].replace(/\\t/g, is), i[d] = (p > 0 && i[d].length > p ? \"…\" : \"\") + i[d].substr(p, Ke - 2) + (i[d].length > p + Ke - 1 ? \"…\" : \"\"));\n  return [\n    a(c, e),\n    new Array(n + f + 2).join(\"-\") + \"^\",\n    a(e, h)\n  ].filter(Boolean).join(`\n`).replace(/^(\\s+\\d+\\s+\\|\\n)+/, \"\").replace(/\\n(\\s+\\d+\\s+\\|)+$/, \"\");\n}\nfunction as(t, e, n, s, r, o = 1, a = 1) {\n  return Object.assign(Th(\"SyntaxError\", t), {\n    source: e,\n    offset: n,\n    line: s,\n    column: r,\n    sourceFragment(u) {\n      return os({ source: e, line: s, column: r, baseLine: o, baseColumn: a }, isNaN(u) ? 0 : u);\n    },\n    get formattedMessage() {\n      return `Parse error: ${t}\n` + os({ source: e, line: s, column: r, baseLine: o, baseColumn: a }, 2);\n    }\n  });\n}\nfunction Ah(t) {\n  const e = this.createList();\n  let n = !1;\n  const s = {\n    recognizer: t\n  };\n  for (; !this.eof; ) {\n    switch (this.tokenType) {\n      case Y:\n        this.next();\n        continue;\n      case W:\n        n = !0, this.next();\n        continue;\n    }\n    let r = t.getNode.call(this, s);\n    if (r === void 0)\n      break;\n    n && (t.onWhiteSpace && t.onWhiteSpace.call(this, r, e, s), n = !1), e.push(r);\n  }\n  return n && t.onWhiteSpace && t.onWhiteSpace.call(this, null, e, s), e;\n}\nconst ls = () => {\n}, vh = 33, Eh = 35, Qe = 59, cs = 123, us = 0;\nfunction $h(t) {\n  return function() {\n    return this[t]();\n  };\n}\nfunction Ye(t) {\n  const e = /* @__PURE__ */ Object.create(null);\n  for (const n of Object.keys(t)) {\n    const s = t[n], r = s.parse || s;\n    r && (e[n] = r);\n  }\n  return e;\n}\nfunction Lh(t) {\n  const e = {\n    context: /* @__PURE__ */ Object.create(null),\n    features: Object.assign(/* @__PURE__ */ Object.create(null), t.features),\n    scope: Object.assign(/* @__PURE__ */ Object.create(null), t.scope),\n    atrule: Ye(t.atrule),\n    pseudo: Ye(t.pseudo),\n    node: Ye(t.node)\n  };\n  for (const [n, s] of Object.entries(t.parseContext))\n    switch (typeof s) {\n      case \"function\":\n        e.context[n] = s;\n        break;\n      case \"string\":\n        e.context[n] = $h(s);\n        break;\n    }\n  return U(U({\n    config: e\n  }, e), e.node);\n}\nfunction Ph(t) {\n  let e = \"\", n = \"<unknown>\", s = !1, r = ls, o = !1;\n  const a = new ua(), l = Object.assign(new ha(), Lh(t || {}), {\n    parseAtrulePrelude: !0,\n    parseRulePrelude: !0,\n    parseValue: !0,\n    parseCustomProperty: !1,\n    readSequence: Ah,\n    consumeUntilBalanceEnd: () => 0,\n    consumeUntilLeftCurlyBracket(i) {\n      return i === cs ? 1 : 0;\n    },\n    consumeUntilLeftCurlyBracketOrSemicolon(i) {\n      return i === cs || i === Qe ? 1 : 0;\n    },\n    consumeUntilExclamationMarkOrSemicolon(i) {\n      return i === vh || i === Qe ? 1 : 0;\n    },\n    consumeUntilSemicolonIncluded(i) {\n      return i === Qe ? 2 : 0;\n    },\n    createList() {\n      return new K();\n    },\n    createSingleNodeList(i) {\n      return new K().appendData(i);\n    },\n    getFirstListNode(i) {\n      return i && i.first;\n    },\n    getLastListNode(i) {\n      return i && i.last;\n    },\n    parseWithFallback(i, c) {\n      const h = this.tokenIndex;\n      try {\n        return i.call(this);\n      } catch (f) {\n        if (o)\n          throw f;\n        this.skip(h - this.tokenIndex);\n        const p = c.call(this);\n        return o = !0, r(f, p), o = !1, p;\n      }\n    },\n    lookupNonWSType(i) {\n      let c;\n      do\n        if (c = this.lookupType(i++), c !== W && c !== Y)\n          return c;\n      while (c !== us);\n      return us;\n    },\n    charCodeAt(i) {\n      return i >= 0 && i < e.length ? e.charCodeAt(i) : 0;\n    },\n    substring(i, c) {\n      return e.substring(i, c);\n    },\n    substrToCursor(i) {\n      return this.source.substring(i, this.tokenStart);\n    },\n    cmpChar(i, c) {\n      return Gs(e, i, c);\n    },\n    cmpStr(i, c, h) {\n      return $e(e, i, c, h);\n    },\n    consume(i) {\n      const c = this.tokenStart;\n      return this.eat(i), this.substrToCursor(c);\n    },\n    consumeFunctionName() {\n      const i = e.substring(this.tokenStart, this.tokenEnd - 1);\n      return this.eat(T), i;\n    },\n    consumeNumber(i) {\n      const c = e.substring(this.tokenStart, qs(e, this.tokenStart));\n      return this.eat(i), c;\n    },\n    eat(i) {\n      if (this.tokenType !== i) {\n        const c = Qs[i].slice(0, -6).replace(/-/g, \" \").replace(/^./, (p) => p.toUpperCase());\n        let h = `${/[[\\](){}]/.test(c) ? `\"${c}\"` : c} is expected`, f = this.tokenStart;\n        switch (i) {\n          case g:\n            this.tokenType === T || this.tokenType === Q ? (f = this.tokenEnd - 1, h = \"Identifier is expected but function found\") : h = \"Identifier is expected\";\n            break;\n          case I:\n            this.isDelim(Eh) && (this.next(), f++, h = \"Name is expected\");\n            break;\n          case F:\n            this.tokenType === b && (f = this.tokenEnd, h = \"Percent sign is expected\");\n            break;\n        }\n        this.error(h, f);\n      }\n      this.next();\n    },\n    eatIdent(i) {\n      (this.tokenType !== g || this.lookupValue(0, i) === !1) && this.error(`Identifier \"${i}\" is expected`), this.next();\n    },\n    eatDelim(i) {\n      this.isDelim(i) || this.error(`Delim \"${String.fromCharCode(i)}\" is expected`), this.next();\n    },\n    getLocation(i, c) {\n      return s ? a.getLocationRange(\n        i,\n        c,\n        n\n      ) : null;\n    },\n    getLocationFromList(i) {\n      if (s) {\n        const c = this.getFirstListNode(i), h = this.getLastListNode(i);\n        return a.getLocationRange(\n          c !== null ? c.loc.start.offset - a.startOffset : this.tokenStart,\n          h !== null ? h.loc.end.offset - a.startOffset : this.tokenStart,\n          n\n        );\n      }\n      return null;\n    },\n    error(i, c) {\n      const h = typeof c != \"undefined\" && c < e.length ? a.getLocation(c) : this.eof ? a.getLocation(aa(e, e.length - 1)) : a.getLocation(this.tokenStart);\n      throw new as(\n        i || \"Unexpected input\",\n        e,\n        h.offset,\n        h.line,\n        h.column,\n        a.startLine,\n        a.startColumn\n      );\n    }\n  });\n  return Object.assign(function(i, c) {\n    e = i, c = c || {}, l.setSource(e, Ys), a.setSource(\n      e,\n      c.offset,\n      c.line,\n      c.column\n    ), n = c.filename || \"<unknown>\", s = !!c.positions, r = typeof c.onParseError == \"function\" ? c.onParseError : ls, o = !1, l.parseAtrulePrelude = \"parseAtrulePrelude\" in c ? !!c.parseAtrulePrelude : !0, l.parseRulePrelude = \"parseRulePrelude\" in c ? !!c.parseRulePrelude : !0, l.parseValue = \"parseValue\" in c ? !!c.parseValue : !0, l.parseCustomProperty = \"parseCustomProperty\" in c ? !!c.parseCustomProperty : !1;\n    const { context: h = \"default\", onComment: f } = c;\n    if (!(h in l.context))\n      throw new Error(\"Unknown context `\" + h + \"`\");\n    typeof f == \"function\" && l.forEachToken((d, m, k) => {\n      if (d === Y) {\n        const y = l.getLocation(m, k), x = $e(e, k - 2, k, \"*/\") ? e.slice(m + 2, k - 2) : e.slice(m + 2, k);\n        f(x, y);\n      }\n    });\n    const p = l.context[h].call(l, c);\n    return l.eof || l.error(), p;\n  }, {\n    SyntaxError: as,\n    config: l.config\n  });\n}\nconst Oh = 35, Rh = 42, hs = 43, _h = 45, Ih = 47, Nh = 117;\nfunction so(t) {\n  switch (this.tokenType) {\n    case I:\n      return this.Hash();\n    case ft:\n      return this.Operator();\n    case _:\n      return this.Parentheses(this.readSequence, t.recognizer);\n    case ee:\n      return this.Brackets(this.readSequence, t.recognizer);\n    case Tt:\n      return this.String();\n    case E:\n      return this.Dimension();\n    case F:\n      return this.Percentage();\n    case b:\n      return this.Number();\n    case T:\n      return this.cmpStr(this.tokenStart, this.tokenEnd, \"url(\") ? this.Url() : this.Function(this.readSequence, t.recognizer);\n    case Q:\n      return this.Url();\n    case g:\n      return this.cmpChar(this.tokenStart, Nh) && this.cmpChar(this.tokenStart + 1, hs) ? this.UnicodeRange() : this.Identifier();\n    case L: {\n      const e = this.charCodeAt(this.tokenStart);\n      if (e === Ih || e === Rh || e === hs || e === _h)\n        return this.Operator();\n      e === Oh && this.error(\"Hex or identifier is expected\", this.tokenStart + 1);\n      break;\n    }\n  }\n}\nconst Dh = {\n  getNode: so\n}, Fh = 35, Mh = 38, jh = 42, Bh = 43, Wh = 47, fs = 46, Uh = 62, zh = 124, Vh = 126;\nfunction Hh(t, e) {\n  e.last !== null && e.last.type !== \"Combinator\" && t !== null && t.type !== \"Combinator\" && e.push({\n    // FIXME: this.Combinator() should be used instead\n    type: \"Combinator\",\n    loc: null,\n    name: \" \"\n  });\n}\nfunction Gh() {\n  switch (this.tokenType) {\n    case ee:\n      return this.AttributeSelector();\n    case I:\n      return this.IdSelector();\n    case X:\n      return this.lookupType(1) === X ? this.PseudoElementSelector() : this.PseudoClassSelector();\n    case g:\n      return this.TypeSelector();\n    case b:\n    case F:\n      return this.Percentage();\n    case E:\n      this.charCodeAt(this.tokenStart) === fs && this.error(\"Identifier is expected\", this.tokenStart + 1);\n      break;\n    case L: {\n      switch (this.charCodeAt(this.tokenStart)) {\n        case Bh:\n        case Uh:\n        case Vh:\n        case Wh:\n          return this.Combinator();\n        case fs:\n          return this.ClassSelector();\n        case jh:\n        case zh:\n          return this.TypeSelector();\n        case Fh:\n          return this.IdSelector();\n        case Mh:\n          return this.NestingSelector();\n      }\n      break;\n    }\n  }\n}\nconst qh = {\n  onWhiteSpace: Hh,\n  getNode: Gh\n};\nfunction Kh() {\n  return this.createSingleNodeList(\n    this.Raw(null, !1)\n  );\n}\nfunction Qh() {\n  const t = this.createList();\n  if (this.skipSC(), t.push(this.Identifier()), this.skipSC(), this.tokenType === ft) {\n    t.push(this.Operator());\n    const e = this.tokenIndex, n = this.parseCustomProperty ? this.Value(null) : this.Raw(this.consumeUntilExclamationMarkOrSemicolon, !1);\n    if (n.type === \"Value\" && n.children.isEmpty) {\n      for (let s = e - this.tokenIndex; s <= 0; s++)\n        if (this.lookupType(s) === W) {\n          n.children.appendData({\n            type: \"WhiteSpace\",\n            loc: null,\n            value: \" \"\n          });\n          break;\n        }\n    }\n    t.push(n);\n  }\n  return t;\n}\nfunction ps(t) {\n  return t !== null && t.type === \"Operator\" && (t.value[t.value.length - 1] === \"-\" || t.value[t.value.length - 1] === \"+\");\n}\nconst Yh = {\n  getNode: so,\n  onWhiteSpace(t, e) {\n    ps(t) && (t.value = \" \" + t.value), ps(e.last) && (e.last.value += \" \");\n  },\n  expression: Kh,\n  var: Qh\n}, Xh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AtrulePrelude: Dh,\n  Selector: qh,\n  Value: Yh\n}, Symbol.toStringTag, { value: \"Module\" })), Jh = /* @__PURE__ */ new Set([\"none\", \"and\", \"not\", \"or\"]), Zh = {\n  parse: {\n    prelude() {\n      const t = this.createList();\n      if (this.tokenType === g) {\n        const e = this.substring(this.tokenStart, this.tokenEnd);\n        Jh.has(e.toLowerCase()) || t.push(this.Identifier());\n      }\n      return t.push(this.Condition(\"container\")), t;\n    },\n    block(t = !1) {\n      return this.Block(t);\n    }\n  }\n}, tf = {\n  parse: {\n    prelude: null,\n    block() {\n      return this.Block(!0);\n    }\n  }\n};\nfunction Xe(t, e) {\n  return this.parseWithFallback(\n    () => {\n      try {\n        return t.call(this);\n      } finally {\n        this.skipSC(), this.lookupNonWSType(0) !== S && this.error();\n      }\n    },\n    e || (() => this.Raw(null, !0))\n  );\n}\nconst ds = {\n  layer() {\n    this.skipSC();\n    const t = this.createList(), e = Xe.call(this, this.Layer);\n    return (e.type !== \"Raw\" || e.value !== \"\") && t.push(e), t;\n  },\n  supports() {\n    this.skipSC();\n    const t = this.createList(), e = Xe.call(\n      this,\n      this.Declaration,\n      () => Xe.call(this, () => this.Condition(\"supports\"))\n    );\n    return (e.type !== \"Raw\" || e.value !== \"\") && t.push(e), t;\n  }\n}, ef = {\n  parse: {\n    prelude() {\n      const t = this.createList();\n      switch (this.tokenType) {\n        case Tt:\n          t.push(this.String());\n          break;\n        case Q:\n        case T:\n          t.push(this.Url());\n          break;\n        default:\n          this.error(\"String or url() is expected\");\n      }\n      return this.skipSC(), this.tokenType === g && this.cmpStr(this.tokenStart, this.tokenEnd, \"layer\") ? t.push(this.Identifier()) : this.tokenType === T && this.cmpStr(this.tokenStart, this.tokenEnd, \"layer(\") && t.push(this.Function(null, ds)), this.skipSC(), this.tokenType === T && this.cmpStr(this.tokenStart, this.tokenEnd, \"supports(\") && t.push(this.Function(null, ds)), (this.lookupNonWSType(0) === g || this.lookupNonWSType(0) === _) && t.push(this.MediaQueryList()), t;\n    },\n    block: null\n  }\n}, nf = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.LayerList()\n      );\n    },\n    block() {\n      return this.Block(!1);\n    }\n  }\n}, sf = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.MediaQueryList()\n      );\n    },\n    block(t = !1) {\n      return this.Block(t);\n    }\n  }\n}, rf = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.SelectorList()\n      );\n    },\n    block() {\n      return this.Block(!0);\n    }\n  }\n}, of = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.SelectorList()\n      );\n    },\n    block() {\n      return this.Block(!0);\n    }\n  }\n}, af = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.Scope()\n      );\n    },\n    block(t = !1) {\n      return this.Block(t);\n    }\n  }\n}, lf = {\n  parse: {\n    prelude: null,\n    block(t = !1) {\n      return this.Block(t);\n    }\n  }\n}, cf = {\n  parse: {\n    prelude() {\n      return this.createSingleNodeList(\n        this.Condition(\"supports\")\n      );\n    },\n    block(t = !1) {\n      return this.Block(t);\n    }\n  }\n}, uf = {\n  container: Zh,\n  \"font-face\": tf,\n  import: ef,\n  layer: nf,\n  media: sf,\n  nest: rf,\n  page: of,\n  scope: af,\n  \"starting-style\": lf,\n  supports: cf\n};\nfunction hf() {\n  const t = this.createList();\n  this.skipSC();\n  t: for (; !this.eof; ) {\n    switch (this.tokenType) {\n      case g:\n        t.push(this.Identifier());\n        break;\n      case Tt:\n        t.push(this.String());\n        break;\n      case ft:\n        t.push(this.Operator());\n        break;\n      case S:\n        break t;\n      default:\n        this.error(\"Identifier, string or comma is expected\");\n    }\n    this.skipSC();\n  }\n  return t;\n}\nconst Rt = {\n  parse() {\n    return this.createSingleNodeList(\n      this.SelectorList()\n    );\n  }\n}, Je = {\n  parse() {\n    return this.createSingleNodeList(\n      this.Selector()\n    );\n  }\n}, ff = {\n  parse() {\n    return this.createSingleNodeList(\n      this.Identifier()\n    );\n  }\n}, pf = {\n  parse: hf\n}, ke = {\n  parse() {\n    return this.createSingleNodeList(\n      this.Nth()\n    );\n  }\n}, df = {\n  dir: ff,\n  has: Rt,\n  lang: pf,\n  matches: Rt,\n  is: Rt,\n  \"-moz-any\": Rt,\n  \"-webkit-any\": Rt,\n  where: Rt,\n  not: Rt,\n  \"nth-child\": ke,\n  \"nth-last-child\": ke,\n  \"nth-last-of-type\": ke,\n  \"nth-of-type\": ke,\n  slotted: Je,\n  host: Je,\n  \"host-context\": Je\n}, gf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  AnPlusB: Xs,\n  Atrule: Zs,\n  AtrulePrelude: er,\n  AttributeSelector: rr,\n  Block: ar,\n  Brackets: cr,\n  CDC: hr,\n  CDO: pr,\n  ClassSelector: gr,\n  Combinator: kr,\n  Comment: yr,\n  Condition: xr,\n  Declaration: Tr,\n  DeclarationList: vr,\n  Dimension: $r,\n  Feature: Pr,\n  FeatureFunction: Rr,\n  FeatureRange: Ir,\n  Function: Dr,\n  GeneralEnclosed: Mr,\n  Hash: Br,\n  IdSelector: Vr,\n  Identifier: Ur,\n  Layer: Gr,\n  LayerList: Kr,\n  MediaQuery: Yr,\n  MediaQueryList: Jr,\n  NestingSelector: ti,\n  Nth: ni,\n  Number: ri,\n  Operator: oi,\n  Parentheses: li,\n  Percentage: ui,\n  PseudoClassSelector: fi,\n  PseudoElementSelector: di,\n  Ratio: mi,\n  Raw: Si,\n  Rule: bi,\n  Scope: Ci,\n  Selector: Ti,\n  SelectorList: vi,\n  String: Pi,\n  StyleSheet: Ri,\n  SupportsDeclaration: Ii,\n  TypeSelector: Di,\n  UnicodeRange: Bi,\n  Url: zi,\n  Value: Hi,\n  WhiteSpace: qi\n}, Symbol.toStringTag, { value: \"Module\" })), mf = {\n  parseContext: {\n    default: \"StyleSheet\",\n    stylesheet: \"StyleSheet\",\n    atrule: \"Atrule\",\n    atrulePrelude(t) {\n      return this.AtrulePrelude(t.atrule ? String(t.atrule) : null);\n    },\n    mediaQueryList: \"MediaQueryList\",\n    mediaQuery: \"MediaQuery\",\n    condition(t) {\n      return this.Condition(t.kind);\n    },\n    rule: \"Rule\",\n    selectorList: \"SelectorList\",\n    selector: \"Selector\",\n    block() {\n      return this.Block(!0);\n    },\n    declarationList: \"DeclarationList\",\n    declaration: \"Declaration\",\n    value: \"Value\"\n  },\n  features: {\n    supports: {\n      selector() {\n        return this.Selector();\n      }\n    },\n    container: {\n      style() {\n        return this.Declaration();\n      }\n    }\n  },\n  scope: Xh,\n  atrule: uf,\n  pseudo: df,\n  node: gf\n}, kf = Ph(mf);\nfunction Pe(t) {\n  const e = {};\n  for (const n of Object.keys(t)) {\n    let s = t[n];\n    s && (Array.isArray(s) || s instanceof K ? s = s.map(Pe) : s.constructor === Object && (s = Pe(s))), e[n] = s;\n  }\n  return e;\n}\nlet Sf = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\", lt = (t = 21) => {\n  let e = \"\", n = t | 0;\n  for (; n--; )\n    e += Sf[Math.random() * 64 | 0];\n  return e;\n};\nconst ro = lt(), re = /* @__PURE__ */ new Set();\nfunction Oe(t) {\n  return !!(t && t.type === \"Function\" && t.name === \"anchor\");\n}\nfunction Lt(t, e = !1) {\n  return kf(t, {\n    parseAtrulePrelude: !1,\n    parseCustomProperty: !0,\n    onParseError: (n) => {\n      e && re.add(n);\n    }\n  });\n}\nfunction Z(t) {\n  return wh(t, {\n    // Default `safe` adds extra (potentially breaking) spaces for compatibility\n    // with old browsers.\n    mode: \"spec\"\n  });\n}\nfunction yf(t) {\n  return t.type === \"Declaration\";\n}\nfunction bf(t) {\n  return t.toArray().reduce(\n    (e, n) => n.type === \"Operator\" && n.value === \",\" ? (e.push([]), e) : (n.type === \"Identifier\" && e[e.length - 1].push(n), e),\n    [[]]\n  );\n}\nfunction fn(t) {\n  return t ? t.children.map((e) => {\n    var r;\n    let n;\n    ((r = e.children.last) == null ? void 0 : r.type) === \"PseudoElementSelector\" && (e = Pe(e), n = Z(e.children.last), e.children.pop());\n    const s = Z(e);\n    return {\n      selector: s + (n != null ? n : \"\"),\n      elementPart: s,\n      pseudoElementPart: n\n    };\n  }).toArray() : [];\n}\nfunction xf() {\n  re.size > 0 && (console.group(\n    `The CSS anchor positioning polyfill was not applied due to ${re.size === 1 ? \"a CSS parse error\" : \"CSS parse errors\"}.`\n  ), re.forEach((t) => {\n    console.warn(t.formattedMessage);\n  }), console.groupEnd());\n}\nfunction Cf() {\n  re.clear();\n}\nconst pn = [\n  ...Xi,\n  \"anchor-scope\",\n  \"anchor-name\"\n].reduce(\n  (t, e) => (t[e] = `--${e}-${ro}`, t),\n  {}\n);\nfunction wf(t, e) {\n  return yf(t) && pn[t.property] && e ? (e.children.appendData(q(U({}, t), {\n    property: pn[t.property]\n  })), { updated: !0 }) : {};\n}\nfunction Tf(t) {\n  for (const e of t) {\n    let n = !1;\n    const s = Lt(e.css, !0);\n    $t(s, {\n      visit: \"Declaration\",\n      enter(r) {\n        var l;\n        const o = (l = this.rule) == null ? void 0 : l.block, { updated: a } = wf(r, o);\n        a && (n = !0);\n      }\n    }), n && (e.css = Z(s), e.changed = !0);\n  }\n  return t.some((e) => e.changed === !0);\n}\nvar io = /* @__PURE__ */ ((t) => (t.All = \"all\", t.None = \"none\", t))(io || {});\nfunction ot(t, e) {\n  var s;\n  return e = (s = pn[e]) != null ? s : e, (t instanceof HTMLElement ? getComputedStyle(t) : t.computedStyle).getPropertyValue(e).trim();\n}\nfunction Zt(t, e, n) {\n  return ot(t, e) === n;\n}\nfunction Af(t, { selector: e, pseudoElementPart: n }) {\n  const s = getComputedStyle(t, n), r = document.createElement(\"div\"), o = document.createElement(\"style\");\n  r.id = `fake-pseudo-element-${lt()}`;\n  for (const l of Array.from(s)) {\n    const u = s.getPropertyValue(l);\n    r.style.setProperty(l, u);\n  }\n  o.textContent += `#${r.id}${n} { content: ${s.content}; }`, o.textContent += `${e} { display: none !important; }`, document.head.append(o);\n  const a = n === \"::before\" ? \"afterbegin\" : \"beforeend\";\n  return t.insertAdjacentElement(a, r), { fakePseudoElement: r, sheet: o, computedStyle: s };\n}\nfunction vf(t) {\n  let e = t;\n  for (; e; ) {\n    if (Zt(e, \"overflow\", \"scroll\"))\n      return e;\n    e = e.parentElement;\n  }\n  return e;\n}\nfunction Ef(t) {\n  let e = vf(t);\n  return e === document.documentElement && (e = null), e != null ? e : { scrollTop: 0, scrollLeft: 0 };\n}\nfunction $f(t, e) {\n  const { elementPart: n, pseudoElementPart: s } = t, r = [];\n  if (s && !(s === \"::before\" || s === \"::after\")) return r;\n  const l = ie(e.roots, n);\n  if (!s)\n    return r.push(...l), r;\n  for (const u of l) {\n    const { fakePseudoElement: i, sheet: c, computedStyle: h } = Af(\n      u,\n      t\n    ), f = i.getBoundingClientRect(), { scrollY: p, scrollX: d } = globalThis, m = Ef(u);\n    r.push({\n      fakePseudoElement: i,\n      computedStyle: h,\n      removeFakePseudoElement() {\n        i.remove(), c.remove();\n      },\n      // For https://floating-ui.com/docs/autoupdate#ancestorscroll to work on\n      // `VirtualElement`s.\n      contextElement: u,\n      // https://floating-ui.com/docs/virtual-elements\n      getBoundingClientRect() {\n        const { scrollY: k, scrollX: y } = globalThis, { scrollTop: x, scrollLeft: A } = m;\n        return DOMRect.fromRect({\n          y: f.y + (p - k) + (m.scrollTop - x),\n          x: f.x + (d - y) + (m.scrollLeft - A),\n          width: f.width,\n          height: f.height\n        });\n      }\n    });\n  }\n  return r;\n}\nfunction Lf(t, e) {\n  const n = ot(t, \"anchor-name\");\n  return e ? n.split(\",\").map((s) => s.trim()).includes(e) : !n;\n}\nfunction Pf(t, e) {\n  const n = ot(t, \"anchor-scope\");\n  return n === e || n === \"all\";\n}\nconst vn = (t) => R(null, null, function* () {\n  var n, s, r;\n  let e = yield (n = V.getOffsetParent) == null ? void 0 : n.call(V, t);\n  return (yield (s = V.isElement) == null ? void 0 : s.call(V, e)) || (e = (yield (r = V.getDocumentElement) == null ? void 0 : r.call(V, t)) || window.document.documentElement), e;\n}), ie = (t, e) => t.flatMap(\n  (n) => [...n.querySelectorAll(e)]\n), gs = \"InvalidMimeType\";\nfunction Of(t) {\n  return !!((t.type === \"text/css\" || t.rel === \"stylesheet\") && t.href);\n}\nfunction Rf(t) {\n  const e = new URL(t.href, document.baseURI);\n  if (Of(t) && e.origin === location.origin)\n    return e;\n}\nfunction _f(t) {\n  return R(this, null, function* () {\n    return (yield Promise.all(\n      t.map((n) => R(null, null, function* () {\n        var s;\n        if (!n.url)\n          return n;\n        if ((s = n.el) != null && s.disabled)\n          return null;\n        try {\n          const r = yield fetch(n.url.toString()), o = r.headers.get(\"content-type\");\n          if (!(o != null && o.startsWith(\"text/css\"))) {\n            const l = new Error(\n              `Error loading ${n.url}: expected content-type \"text/css\", got \"${o}\".`\n            );\n            throw l.name = gs, l;\n          }\n          const a = yield r.text();\n          return q(U({}, n), { css: a });\n        } catch (r) {\n          if (r instanceof Error && r.name === gs)\n            return console.warn(r), null;\n          throw r;\n        }\n      }))\n    )).filter((n) => n !== null);\n  });\n}\nconst ms = '[style*=\"anchor\"]', ks = '[style*=\"position-area\"]';\nfunction If(t) {\n  const e = t ? t.filter(\n    (s) => s instanceof HTMLElement && (s.matches(ms) || s.matches(ks))\n  ) : Array.from(\n    document.querySelectorAll(\n      [\n        ms,\n        ks\n      ].join(\",\")\n    )\n  ), n = [];\n  return e.filter((s) => s instanceof HTMLElement).forEach((s) => {\n    const r = lt(12), o = \"data-has-inline-styles\";\n    s.setAttribute(o, r);\n    const a = s.getAttribute(\"style\"), l = `[${o}=\"${r}\"] { ${a} }`;\n    n.push({ el: s, css: l });\n  }), n;\n}\nfunction Nf(t) {\n  return R(this, null, function* () {\n    var o, a;\n    const e = (o = t.elements) != null ? o : ie(t.roots, \"link, style\"), n = [];\n    e.filter((l) => l instanceof HTMLElement).forEach((l) => {\n      if (l.tagName.toLowerCase() === \"link\") {\n        const u = Rf(l);\n        u && n.push({ el: l, url: u });\n      }\n      l.tagName.toLowerCase() === \"style\" && n.push({ el: l, css: l.innerHTML });\n    });\n    const s = t.excludeInlineStyles ? (a = t.elements) != null ? a : [] : void 0, r = If(s);\n    return yield _f([...n, ...r]);\n  });\n}\nconst Df = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nlet oo = (t = 21) => {\n  let e = \"\", n = crypto.getRandomValues(new Uint8Array(t |= 0));\n  for (; t--; )\n    e += Df[n[t] & 63];\n  return e;\n};\nconst ao = \"--pa-cascade-property\", lo = \"data-anchor-position-wrapper\", co = \"data-pa-wrapper-for-\", Ss = \"POLYFILL-POSITION-AREA\", Ff = [\n  \"left\",\n  \"center\",\n  \"right\",\n  \"span-left\",\n  \"span-right\",\n  \"x-start\",\n  \"x-end\",\n  \"span-x-start\",\n  \"span-x-end\",\n  \"x-self-start\",\n  \"x-self-end\",\n  \"span-x-self-start\",\n  \"span-x-self-end\",\n  \"span-all\",\n  \"top\",\n  \"bottom\",\n  \"span-top\",\n  \"span-bottom\",\n  \"y-start\",\n  \"y-end\",\n  \"span-y-start\",\n  \"span-y-end\",\n  \"y-self-start\",\n  \"y-self-end\",\n  \"span-y-self-start\",\n  \"span-y-self-end\",\n  \"block-start\",\n  \"block-end\",\n  \"span-block-start\",\n  \"span-block-end\",\n  \"inline-start\",\n  \"inline-end\",\n  \"span-inline-start\",\n  \"span-inline-end\",\n  \"self-block-start\",\n  \"self-block-end\",\n  \"span-self-block-start\",\n  \"span-self-block-end\",\n  \"self-inline-start\",\n  \"self-inline-end\",\n  \"span-self-inline-start\",\n  \"span-self-inline-end\",\n  \"start\",\n  \"end\",\n  \"span-start\",\n  \"span-end\",\n  \"self-start\",\n  \"self-end\",\n  \"span-self-start\",\n  \"span-self-end\"\n];\nfunction uo(t) {\n  return Ff.includes(t);\n}\nconst ys = {\n  left: [\n    0,\n    1,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  center: [\n    1,\n    2,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  right: [\n    2,\n    3,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"span-left\": [\n    0,\n    2,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"span-right\": [\n    1,\n    3,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"x-start\": [\n    0,\n    1,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"x-end\": [\n    2,\n    3,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"span-x-start\": [\n    0,\n    2,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"span-x-end\": [\n    1,\n    3,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"x-self-start\": [\n    0,\n    1,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"x-self-end\": [\n    2,\n    3,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"span-x-self-start\": [\n    0,\n    2,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"span-x-self-end\": [\n    1,\n    3,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"span-all\": [\n    0,\n    3,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  top: [\n    0,\n    1,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  bottom: [\n    2,\n    3,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"span-top\": [\n    0,\n    2,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"span-bottom\": [\n    1,\n    3,\n    \"Irrelevant\"\n    /* Irrelevant */\n  ],\n  \"y-start\": [\n    0,\n    1,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"y-end\": [\n    2,\n    3,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"span-y-start\": [\n    0,\n    2,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"span-y-end\": [\n    1,\n    3,\n    \"Physical\"\n    /* Physical */\n  ],\n  \"y-self-start\": [\n    0,\n    1,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"y-self-end\": [\n    2,\n    3,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"span-y-self-start\": [\n    0,\n    2,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"span-y-self-end\": [\n    1,\n    3,\n    \"PhysicalSelf\"\n    /* PhysicalSelf */\n  ],\n  \"block-start\": [\n    0,\n    1,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"block-end\": [\n    2,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-block-start\": [\n    0,\n    2,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-block-end\": [\n    1,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"inline-start\": [\n    0,\n    1,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"inline-end\": [\n    2,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-inline-start\": [\n    0,\n    2,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-inline-end\": [\n    1,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"self-block-start\": [\n    0,\n    1,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"self-block-end\": [\n    2,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-block-start\": [\n    0,\n    2,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-block-end\": [\n    1,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"self-inline-start\": [\n    0,\n    1,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"self-inline-end\": [\n    2,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-inline-start\": [\n    0,\n    2,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-inline-end\": [\n    1,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  start: [\n    0,\n    1,\n    \"Logical\"\n    /* Logical */\n  ],\n  end: [\n    2,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-start\": [\n    0,\n    2,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"span-end\": [\n    1,\n    3,\n    \"Logical\"\n    /* Logical */\n  ],\n  \"self-start\": [\n    0,\n    1,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"self-end\": [\n    2,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-start\": [\n    0,\n    2,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ],\n  \"span-self-end\": [\n    1,\n    3,\n    \"LogicalSelf\"\n    /* LogicalSelf */\n  ]\n}, Mf = [\n  \"left\",\n  \"center\",\n  \"right\",\n  \"span-left\",\n  \"span-right\",\n  \"x-start\",\n  \"x-end\",\n  \"span-x-start\",\n  \"span-x-end\",\n  \"x-self-start\",\n  \"x-self-end\",\n  \"span-x-self-start\",\n  \"span-x-self-end\",\n  \"span-all\"\n], jf = [\n  \"top\",\n  \"center\",\n  \"bottom\",\n  \"span-top\",\n  \"span-bottom\",\n  \"y-start\",\n  \"y-end\",\n  \"span-y-start\",\n  \"span-y-end\",\n  \"y-self-start\",\n  \"y-self-end\",\n  \"span-y-self-start\",\n  \"span-y-self-end\",\n  \"span-all\"\n], Bf = [\n  \"block-start\",\n  \"center\",\n  \"block-end\",\n  \"span-block-start\",\n  \"span-block-end\",\n  \"span-all\"\n], Wf = [\n  \"inline-start\",\n  \"center\",\n  \"inline-end\",\n  \"span-inline-start\",\n  \"span-inline-end\",\n  \"span-all\"\n], Uf = [\n  \"self-block-start\",\n  \"center\",\n  \"self-block-end\",\n  \"span-self-block-start\",\n  \"span-self-block-end\",\n  \"span-all\"\n], zf = [\n  \"self-inline-start\",\n  \"center\",\n  \"self-inline-end\",\n  \"span-self-inline-start\",\n  \"span-self-inline-end\",\n  \"span-all\"\n], bs = [\n  \"start\",\n  \"center\",\n  \"end\",\n  \"span-start\",\n  \"span-end\",\n  \"span-all\"\n], xs = [\n  \"self-start\",\n  \"center\",\n  \"self-end\",\n  \"span-self-start\",\n  \"span-self-end\",\n  \"span-all\"\n], Vf = [\"block\", \"top\", \"bottom\", \"y\"], Hf = [\"inline\", \"left\", \"right\", \"x\"];\nfunction dn(t) {\n  const e = t.split(\"-\");\n  for (const n of e) {\n    if (Vf.includes(n)) return \"block\";\n    if (Hf.includes(n)) return \"inline\";\n  }\n  return \"ambiguous\";\n}\nfunction Gf(t, e) {\n  return e[0].includes(t[0]) && e[1].includes(t[1]) || e[0].includes(t[1]) && e[1].includes(t[0]);\n}\nconst qf = [\n  [Mf, jf],\n  [Bf, Wf],\n  [Uf, zf],\n  [bs, bs],\n  [xs, xs]\n];\nfunction Kf(t) {\n  for (const e of qf)\n    if (Gf(t, e)) return !0;\n  return !1;\n}\nconst Cs = (t) => {\n  const e = getComputedStyle(t);\n  return {\n    writingMode: e.writingMode,\n    direction: e.direction\n  };\n}, Qf = (t, e) => R(null, null, function* () {\n  const n = yield vn(t);\n  switch (e) {\n    case \"Logical\":\n    case \"Physical\":\n      return Cs(n);\n    case \"LogicalSelf\":\n    case \"PhysicalSelf\":\n      return Cs(t);\n    default:\n      return null;\n  }\n}), Ze = (t) => t.reverse().map((e) => 3 - e), ho = (t, e) => t === \"Irrelevant\" ? e : t, Yf = (s, r) => R(null, [s, r], function* ({\n  block: t,\n  inline: e\n}, n) {\n  const o = ho(t[2], e[2]), a = yield Qf(n, o), l = {\n    block: [t[0], t[1]],\n    inline: [e[0], e[1]]\n  };\n  if (a) {\n    if (a.direction === \"rtl\" && (l.inline = Ze(l.inline)), a.writingMode.startsWith(\"vertical\")) {\n      const u = l.block;\n      l.block = l.inline, l.inline = u;\n    }\n    if (a.writingMode.startsWith(\"sideways\")) {\n      const u = l.block;\n      l.block = l.inline, l.inline = u, a.writingMode.endsWith(\"lr\") && (l.block = Ze(l.block));\n    }\n    a.writingMode.endsWith(\"rl\") && (l.inline = Ze(l.inline));\n  }\n  return l;\n}), Xf = ({\n  block: t,\n  inline: e\n}) => {\n  const n = [0, \"top\", \"bottom\", 0], s = [0, \"left\", \"right\", 0];\n  return {\n    block: [n[t[0]], n[t[1]]],\n    inline: [s[e[0]], s[e[1]]]\n  };\n};\nfunction ws([t, e]) {\n  return t === 0 && e === 3 ? \"center\" : t === 0 ? \"end\" : e === 3 ? \"start\" : \"center\";\n}\nfunction Jf(t) {\n  return t.type === \"Declaration\" && t.property === \"position-area\";\n}\nfunction Zf(t) {\n  const e = t.value.children.toArray().map(({ name: n }) => n);\n  return e.length === 1 && (dn(e[0]) === \"ambiguous\" ? e.push(e[0]) : e.push(\"span-all\")), e;\n}\nfunction tp(t) {\n  if (!Jf(t)) return;\n  const e = Zf(t);\n  if (!Kf(e)) return;\n  const n = {};\n  switch (dn(e[0])) {\n    case \"block\":\n      n.block = e[0], n.inline = e[1];\n      break;\n    case \"inline\":\n      n.inline = e[0], n.block = e[1];\n      break;\n    case \"ambiguous\":\n      dn(e[1]) == \"block\" ? (n.block = e[1], n.inline = e[0]) : (n.inline = e[1], n.block = e[0]);\n      break;\n  }\n  const s = {\n    block: ys[n.block],\n    inline: ys[n.inline]\n  }, r = `--pa-declaration-${oo(12)}`;\n  return {\n    values: n,\n    grid: s,\n    selectorUUID: r\n  };\n}\nfunction ep(t, e) {\n  [\n    // Insets are applied to a wrapping element\n    \"justify-self\",\n    \"align-self\"\n  ].forEach((n) => {\n    e.children.appendData({\n      type: \"Declaration\",\n      property: n,\n      value: { type: \"Raw\", value: `var(--pa-value-${n})` },\n      important: !1\n    });\n  }), e.children.appendData({\n    type: \"Declaration\",\n    property: ao,\n    value: { type: \"Raw\", value: t.selectorUUID },\n    important: !1\n  });\n}\nfunction np(t, e) {\n  var s, r;\n  let n;\n  if (((s = t.parentElement) == null ? void 0 : s.tagName) === Ss)\n    n = t.parentElement;\n  else {\n    n = document.createElement(Ss), n.style.display = \"grid\", n.style.position = \"absolute\";\n    const o = getComputedStyle(t).pointerEvents;\n    n.style.pointerEvents = \"none\", t.style.pointerEvents = o, [\"top\", \"left\", \"right\", \"bottom\"].forEach((a) => {\n      n.style.setProperty(a, `var(--pa-value-${a})`);\n    }), (r = t.parentElement) == null || r.insertBefore(n, t), n.appendChild(t);\n  }\n  return n.setAttribute(\n    `${co}${e}`,\n    \"\"\n  ), n;\n}\nfunction sp(t, e, n) {\n  return R(this, null, function* () {\n    const s = `--pa-target-${oo(12)}`, r = yield Yf(\n      e.grid,\n      t\n    ), o = Xf(r), a = ho(\n      e.grid.block[2],\n      e.grid.inline[2]\n    ), l = [\n      \"LogicalSelf\",\n      \"PhysicalSelf\"\n      /* PhysicalSelf */\n    ].includes(a) ? r : e.grid, u = {\n      block: ws([l.block[0], l.block[1]]),\n      inline: ws([\n        l.inline[0],\n        l.inline[1]\n      ])\n    };\n    return {\n      insets: o,\n      alignments: u,\n      targetUUID: s,\n      targetEl: t,\n      anchorEl: n,\n      wrapperEl: np(t, s),\n      values: e.values,\n      grid: e.grid,\n      selectorUUID: e.selectorUUID\n    };\n  });\n}\nfunction rp(t, e) {\n  return `\n    [${lo}=\"${e}\"][${co}${t}] {\n      --pa-value-top: var(${t}-top);\n      --pa-value-left: var(${t}-left);\n      --pa-value-right: var(${t}-right);\n      --pa-value-bottom: var(${t}-bottom);\n      --pa-value-justify-self: var(${t}-justify-self);\n      --pa-value-align-self: var(${t}-align-self);\n    }\n  `.replaceAll(`\n`, \"\");\n}\nconst ip = [\n  \"normal\",\n  \"most-width\",\n  \"most-height\",\n  \"most-block-size\",\n  \"most-inline-size\"\n], op = [\n  \"flip-block\",\n  \"flip-inline\",\n  \"flip-start\"\n];\nfunction ap(t) {\n  return t.type === \"Declaration\";\n}\nfunction lp(t) {\n  return t.type === \"Declaration\" && t.property === \"position-try-fallbacks\";\n}\nfunction cp(t) {\n  return t.type === \"Declaration\" && t.property === \"position-try-order\";\n}\nfunction up(t) {\n  return t.type === \"Declaration\" && t.property === \"position-try\";\n}\nfunction hp(t) {\n  return t.type === \"Atrule\" && t.name === \"position-try\";\n}\nfunction fp(t) {\n  return op.includes(t);\n}\nfunction pp(t) {\n  return ip.includes(t);\n}\nfunction dp(t, e) {\n  const n = document.querySelector(t);\n  if (n) {\n    let s = mp(n);\n    return e.forEach((r) => {\n      s = fo(s, r);\n    }), s;\n  }\n}\nfunction gp(t, e) {\n  let n = t.declarations;\n  return e.forEach((s) => {\n    n = fo(n, s);\n  }), n;\n}\nfunction mp(t) {\n  const e = {};\n  return Xi.forEach((n) => {\n    const s = ot(t, `--${n}-${ro}`);\n    s && (e[n] = s);\n  }), e;\n}\nconst kp = {\n  \"flip-block\": {\n    top: \"bottom\",\n    bottom: \"top\",\n    \"inset-block-start\": \"inset-block-end\",\n    \"inset-block-end\": \"inset-block-start\",\n    \"margin-top\": \"margin-bottom\",\n    \"margin-bottom\": \"margin-top\"\n  },\n  \"flip-inline\": {\n    left: \"right\",\n    right: \"left\",\n    \"inset-inline-start\": \"inset-inline-end\",\n    \"inset-inline-end\": \"inset-inline-start\",\n    \"margin-left\": \"margin-right\",\n    \"margin-right\": \"margin-left\"\n  },\n  \"flip-start\": {\n    left: \"top\",\n    right: \"bottom\",\n    top: \"left\",\n    bottom: \"right\",\n    \"inset-block-start\": \"inset-block-end\",\n    \"inset-block-end\": \"inset-block-start\",\n    \"inset-inline-start\": \"inset-inline-end\",\n    \"inset-inline-end\": \"inset-inline-start\",\n    \"inset-block\": \"inset-inline\",\n    \"inset-inline\": \"inset-block\"\n  }\n}, Sp = {\n  \"flip-block\": {\n    top: \"bottom\",\n    bottom: \"top\",\n    start: \"end\",\n    end: \"start\",\n    \"self-end\": \"self-start\",\n    \"self-start\": \"self-end\"\n  },\n  \"flip-inline\": {\n    left: \"right\",\n    right: \"left\",\n    start: \"end\",\n    end: \"start\",\n    \"self-end\": \"self-start\",\n    \"self-start\": \"self-end\"\n  },\n  \"flip-start\": {\n    top: \"left\",\n    left: \"top\",\n    right: \"bottom\",\n    bottom: \"right\"\n  }\n}, yp = {\n  \"flip-block\": {\n    top: \"bottom\",\n    bottom: \"top\",\n    start: \"end\",\n    end: \"start\"\n  },\n  \"flip-inline\": {\n    left: \"right\",\n    right: \"left\",\n    start: \"end\",\n    end: \"start\"\n  },\n  \"flip-start\": {\n    // TODO: Requires fuller logic\n  }\n};\nfunction bp(t, e) {\n  return kp[e][t] || t;\n}\nfunction xp(t, e) {\n  return Sp[e][t] || t;\n}\nfunction Cp(t, e) {\n  if (e === \"flip-start\")\n    return t;\n  {\n    const n = yp[e];\n    return t.split(\"-\").map((s) => n[s] || s).join(\"-\");\n  }\n}\nfunction wp(t, e, n) {\n  if (t === \"margin\") {\n    const [s, r, o, a] = e.children.toArray();\n    n === \"flip-block\" ? a ? e.children.fromArray([o, r, s, a]) : o && e.children.fromArray([o, r, s]) : n === \"flip-inline\" && a && e.children.fromArray([s, a, o, r]);\n  } else if (t === \"margin-block\") {\n    const [s, r] = e.children.toArray();\n    n === \"flip-block\" && r && e.children.fromArray([r, s]);\n  } else if (t === \"margin-inline\") {\n    const [s, r] = e.children.toArray();\n    n === \"flip-inline\" && r && e.children.fromArray([r, s]);\n  }\n}\nconst Tp = (t, e) => {\n  var r;\n  return ((r = Lt(`#id{${t}: ${e};}`).children.first) == null ? void 0 : r.block.children.first).value;\n};\nfunction fo(t, e) {\n  const n = {};\n  return Object.entries(t).forEach(([s, r]) => {\n    var u;\n    const o = s, a = Tp(o, r), l = bp(o, e);\n    l !== o && ((u = n[o]) != null || (n[o] = \"revert\")), $t(a, {\n      visit: \"Function\",\n      enter(i) {\n        Oe(i) && i.children.forEach((c) => {\n          oe(c) && Zi(c.name) && (c.name = xp(c.name, e));\n        });\n      }\n    }), o === \"position-area\" && a.children.forEach((i) => {\n      oe(i) && uo(i.name) && (i.name = Cp(i.name, e));\n    }), o.startsWith(\"margin\") && wp(o, a, e), n[l] = Z(a);\n  }), n;\n}\nfunction po(t) {\n  const e = bf(t), n = [];\n  return e.forEach((s) => {\n    const r = {\n      atRules: [],\n      tactics: [],\n      positionAreas: []\n    };\n    s.forEach((o) => {\n      fp(o.name) ? r.tactics.push(o.name) : o.name.startsWith(\"--\") ? r.atRules.push(o.name) : uo(o.name) && r.positionAreas.push(o.name);\n    }), r.positionAreas.length ? n.push({\n      positionArea: r.positionAreas[0],\n      type: \"position-area\"\n    }) : r.atRules.length && r.tactics.length ? n.push({\n      tactics: r.tactics,\n      atRule: r.atRules[0],\n      type: \"at-rule-with-try-tactic\"\n    }) : r.atRules.length ? n.push({\n      atRule: r.atRules[0],\n      type: \"at-rule\"\n    }) : r.tactics.length && n.push({\n      tactics: r.tactics,\n      type: \"try-tactic\"\n    });\n  }), n;\n}\nfunction Ap(t) {\n  return lp(t) && t.value.children.first ? po(t.value.children) : [];\n}\nfunction vp(t) {\n  if (up(t) && t.value.children.first) {\n    const e = Pe(t);\n    let n;\n    const s = e.value.children.first.name;\n    s && pp(s) && (n = s, e.value.children.shift());\n    const r = po(e.value.children);\n    return { order: n, options: r };\n  }\n  return {};\n}\nfunction Ep(t) {\n  return cp(t) && t.value.children.first ? {\n    order: t.value.children.first.name\n  } : {};\n}\nfunction $p(t) {\n  const { order: e, options: n } = vp(t);\n  if (e || n)\n    return { order: e, options: n };\n  const { order: s } = Ep(t), r = Ap(t);\n  return s || r ? { order: s, options: r } : {};\n}\nfunction Lp(t) {\n  return ue(t.property) || oh(t.property) || Qi(t.property) || ah(t.property) || [\"position-anchor\", \"position-area\"].includes(t.property);\n}\nfunction Pp(t) {\n  var e, n;\n  if (hp(t) && ((e = t.prelude) != null && e.value) && ((n = t.block) != null && n.children)) {\n    const s = t.prelude.value, r = t.block.children.filter(\n      (a) => ap(a) && Lp(a)\n    ), o = {\n      uuid: `${s}-try-${lt(12)}`,\n      declarations: Object.fromEntries(\n        r.map((a) => [a.property, Z(a.value)])\n      )\n    };\n    return { name: s, tryBlock: o };\n  }\n  return {};\n}\nfunction Op(t) {\n  const e = {}, n = {}, s = {};\n  for (const r of t) {\n    const o = Lt(r.css);\n    $t(o, {\n      visit: \"Atrule\",\n      enter(a) {\n        const { name: l, tryBlock: u } = Pp(a);\n        l && u && (e[l] = u);\n      }\n    });\n  }\n  for (const r of t) {\n    let o = !1;\n    const a = /* @__PURE__ */ new Set(), l = Lt(r.css);\n    $t(l, {\n      visit: \"Declaration\",\n      enter(u) {\n        var d;\n        const i = (d = this.rule) == null ? void 0 : d.prelude, c = fn(i);\n        if (!c.length) return;\n        const { order: h, options: f } = $p(u), p = {};\n        h && (p.order = h), c.forEach(({ selector: m }) => {\n          var k, y;\n          f == null || f.forEach((x) => {\n            var M, et, w;\n            let A;\n            if (x.type === \"at-rule\")\n              A = x.atRule;\n            else if (x.type === \"try-tactic\") {\n              A = `${m}-${x.tactics.join(\"-\")}`;\n              const C = dp(\n                m,\n                x.tactics\n              );\n              C && (e[A] = {\n                uuid: `${m}-${x.tactics.join(\"-\")}-try-${lt(12)}`,\n                declarations: C\n              });\n            } else if (x.type === \"at-rule-with-try-tactic\") {\n              A = `${m}-${x.atRule}-${x.tactics.join(\"-\")}`;\n              const C = e[x.atRule], O = gp(\n                C,\n                x.tactics\n              );\n              O && (e[A] = {\n                uuid: `${m}-${x.atRule}-${x.tactics.join(\"-\")}-try-${lt(12)}`,\n                declarations: O\n              });\n            }\n            if (A && e[A]) {\n              const C = `[data-anchor-polyfill=\"${e[A].uuid}\"]`;\n              (M = n[C]) != null || (n[C] = []), n[C].push(m), a.has(A) || ((et = p.fallbacks) != null || (p.fallbacks = []), p.fallbacks.push(e[A]), a.add(A), (w = this.stylesheet) == null || w.children.prependData({\n                type: \"Rule\",\n                prelude: {\n                  type: \"Raw\",\n                  value: C\n                },\n                block: {\n                  type: \"Block\",\n                  children: new K().fromArray(\n                    Object.entries(e[A].declarations).map(\n                      ([O, P]) => ({\n                        type: \"Declaration\",\n                        important: !0,\n                        property: O,\n                        value: {\n                          type: \"Raw\",\n                          value: P\n                        }\n                      })\n                    )\n                  )\n                }\n              }), o = !0);\n            }\n          }), Object.keys(p).length > 0 && (s[m] ? (p.order && (s[m].order = p.order), p.fallbacks && ((y = (k = s[m]).fallbacks) != null || (k.fallbacks = []), s[m].fallbacks.push(\n            ...p.fallbacks\n          ))) : s[m] = p);\n        });\n      }\n    }), o && (r.css = Z(l), r.changed = !0);\n  }\n  return { fallbackTargets: n, validPositions: s };\n}\nfunction Rp(t, e) {\n  return !t || t === e ? !1 : go(t) ? t.document.contains(e) : t.contains(e);\n}\nfunction go(t) {\n  return !!(t && t === t.window);\n}\nfunction _p(t) {\n  return Zt(t, \"position\", \"fixed\");\n}\nfunction gn(t) {\n  return !!(t && (_p(t) || Zt(t, \"position\", \"absolute\")));\n}\nfunction Ts(t, e) {\n  return t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING;\n}\nfunction Ip(t) {\n  return R(this, null, function* () {\n    return yield V.getOffsetParent(t);\n  });\n}\nfunction tn(t) {\n  return R(this, null, function* () {\n    if (![\"absolute\", \"fixed\"].includes(ot(t, \"position\")))\n      return yield Ip(t);\n    let e = t.parentElement;\n    for (; e; ) {\n      if (!Zt(e, \"position\", \"static\") && Zt(e, \"display\", \"block\"))\n        return e;\n      e = e.parentElement;\n    }\n    return window;\n  });\n}\nfunction Np(t, e, n, s) {\n  return R(this, null, function* () {\n    const r = yield tn(t), o = yield tn(n);\n    if (!(Rp(o, t) || go(o)) || r === o && !(!gn(t) || Ts(t, n)))\n      return !1;\n    if (r !== o) {\n      let a;\n      const l = [];\n      for (a = r; a && a !== o && a !== window; )\n        l.push(a), a = yield tn(a);\n      const u = l[l.length - 1];\n      if (u instanceof HTMLElement && !(!gn(u) || Ts(u, n)))\n        return !1;\n    }\n    {\n      let a = t.parentElement;\n      for (; a; ) {\n        if (Zt(a, \"content-visibility\", \"hidden\"))\n          return !1;\n        a = a.parentElement;\n      }\n    }\n    return !(e && s && As(t, e, s) !== As(n, e, s));\n  });\n}\nfunction As(t, e, n) {\n  for (; !(t.matches(n) && Pf(t, e)); ) {\n    if (!t.parentElement)\n      return null;\n    t = t.parentElement;\n  }\n  return t;\n}\nfunction Dp(t, e, n, s, r) {\n  return R(this, null, function* () {\n    if (!(t instanceof HTMLElement && n.length && gn(t)))\n      return null;\n    const o = n.flatMap((l) => $f(l, r)).filter((l) => Lf(l, e)), a = s.map((l) => l.selector).join(\",\") || null;\n    for (let l = o.length - 1; l >= 0; l--) {\n      const u = o[l], i = \"fakePseudoElement\" in u;\n      if (yield Np(\n        i ? u.fakePseudoElement : u,\n        e,\n        t,\n        a\n      ))\n        return i && u.removeFakePseudoElement(), u;\n    }\n    return null;\n  });\n}\nfunction Fp(t) {\n  return t.type === \"Declaration\" && t.property === \"anchor-name\";\n}\nfunction Mp(t) {\n  return t.type === \"Declaration\" && t.property === \"anchor-scope\";\n}\nfunction mn(t) {\n  return !!(t && t.type === \"Function\" && t.name === \"anchor-size\");\n}\nfunction we(t) {\n  return !!(t && t.type === \"Function\" && t.name === \"var\");\n}\nfunction oe(t) {\n  return !!(t.type === \"Identifier\" && t.name);\n}\nfunction jp(t) {\n  return !!(t.type === \"Percentage\" && t.value);\n}\nfunction vs(t, e) {\n  let n, s, r, o = \"\", a = !1, l;\n  const u = [];\n  t.children.toArray().forEach((f) => {\n    if (a) {\n      o = `${o}${Z(f)}`;\n      return;\n    }\n    if (f.type === \"Operator\" && f.value === \",\") {\n      a = !0;\n      return;\n    }\n    u.push(f);\n  });\n  let [i, c] = u;\n  if (c || (c = i, i = void 0), i && (oe(i) && i.name.startsWith(\"--\") ? n = i.name : we(i) && i.children.first && (l = i.children.first.name)), c)\n    if (Oe(t)) {\n      if (oe(c) && Zi(c.name))\n        s = c.name;\n      else if (jp(c)) {\n        const f = Number(c.value);\n        s = Number.isNaN(f) ? void 0 : f;\n      }\n    } else mn(t) && oe(c) && hh(c.name) && (r = c.name);\n  const h = `--anchor-${lt(12)}`;\n  return Object.assign(t, {\n    type: \"Raw\",\n    value: `var(${h})`,\n    children: null\n  }), Reflect.deleteProperty(t, \"name\"), {\n    anchorName: n,\n    anchorSide: s,\n    anchorSize: r,\n    fallbackValue: o || \"0px\",\n    customPropName: l,\n    uuid: h\n  };\n}\nfunction Es(t) {\n  return t.value.children.map(({ name: e }) => e);\n}\nlet Ht = {}, Et = {}, Nt = {}, ae = {}, It = {};\nfunction Bp() {\n  Ht = {}, Et = {}, Nt = {}, ae = {}, It = {};\n}\nfunction Wp(t, e) {\n  var n;\n  if ((Oe(t) || mn(t)) && e) {\n    if (e.property.startsWith(\"--\")) {\n      const s = Z(e.value), r = vs(t);\n      return ae[r.uuid] = s, Nt[e.property] = [\n        ...(n = Nt[e.property]) != null ? n : [],\n        r\n      ], { changed: !0 };\n    }\n    if (Oe(t) && ue(e.property) || mn(t) && Ji(e.property)) {\n      const s = vs(t);\n      return { prop: e.property, data: s, changed: !0 };\n    }\n  }\n  return {};\n}\nfunction $s(t, e, n) {\n  return R(this, null, function* () {\n    let s = e == null ? void 0 : e.anchorName;\n    const r = e == null ? void 0 : e.customPropName;\n    if (t && !s) {\n      const u = ot(\n        t,\n        \"position-anchor\"\n      );\n      u ? s = u : r && (s = ot(t, r));\n    }\n    const o = s ? Ht[s] || [] : [], a = s ? Et[io.All] || [] : [], l = s ? Et[s] || [] : [];\n    return yield Dp(\n      t,\n      s || null,\n      o,\n      [...a, ...l],\n      { roots: n.roots }\n    );\n  });\n}\nfunction Up(t, e) {\n  return R(this, null, function* () {\n    var h, f, p, d, m, k, y, x, A, M, et;\n    const n = {}, s = {};\n    Bp();\n    const { fallbackTargets: r, validPositions: o } = Op(t);\n    for (const w of t) {\n      let C = !1;\n      const O = Lt(w.css);\n      $t(O, function(P) {\n        var J, xt, Ot, Ct, pt, wt;\n        const N = (J = this.rule) == null ? void 0 : J.prelude, $ = fn(N);\n        if (Fp(P) && $.length)\n          for (const B of Es(P))\n            (xt = Ht[B]) != null || (Ht[B] = []), Ht[B].push(...$);\n        if (Mp(P) && $.length)\n          for (const B of Es(P))\n            (Ot = Et[B]) != null || (Et[B] = []), Et[B].push(...$);\n        const {\n          prop: v,\n          data: j,\n          changed: D\n        } = Wp(P, this.declaration);\n        if (v && j && $.length)\n          for (const { selector: B } of $)\n            n[B] = q(U({}, n[B]), {\n              [v]: [...(pt = (Ct = n[B]) == null ? void 0 : Ct[v]) != null ? pt : [], j]\n            });\n        let H;\n        if (this.block && (H = tp(P), H)) {\n          ep(\n            H,\n            this.block\n          );\n          for (const { selector: B } of $)\n            s[B] = [\n              ...(wt = s[B]) != null ? wt : [],\n              H\n            ];\n        }\n        (D || H) && (C = !0);\n      }), C && (w.css = Z(O), w.changed = !0);\n    }\n    const a = new Set(Object.keys(Nt)), l = {}, u = (w) => {\n      var P, N, $, v, j;\n      const C = [], O = new Set((N = (P = l[w]) == null ? void 0 : P.names) != null ? N : []);\n      for (; O.size > 0; )\n        for (const D of O)\n          C.push(...($ = Nt[D]) != null ? $ : []), O.delete(D), (j = (v = l[D]) == null ? void 0 : v.names) != null && j.length && l[D].names.forEach((H) => O.add(H));\n      return C;\n    };\n    for (; a.size > 0; ) {\n      const w = [];\n      for (const C of t) {\n        let O = !1;\n        const P = Lt(C.css);\n        $t(P, {\n          visit: \"Function\",\n          enter(N) {\n            var D, H;\n            const $ = (D = this.rule) == null ? void 0 : D.prelude, v = this.declaration, j = v == null ? void 0 : v.property;\n            if (($ == null ? void 0 : $.children.isEmpty) === !1 && we(N) && v && j && N.children.first && a.has(N.children.first.name) && // For now, we only want assignments to other CSS custom properties\n            j.startsWith(\"--\")) {\n              const J = N.children.first, xt = (H = Nt[J.name]) != null ? H : [], Ot = u(J.name);\n              if (!(xt.length || Ot.length))\n                return;\n              const Ct = `${J.name}-anchor-${lt(12)}`, pt = Z(v.value);\n              ae[Ct] = pt, l[j] || (l[j] = { names: [], uuids: [] });\n              const wt = l[j];\n              wt.names.includes(J.name) || wt.names.push(J.name), wt.uuids.push(Ct), w.push(j), J.name = Ct, O = !0;\n            }\n          }\n        }), O && (C.css = Z(P), C.changed = !0);\n      }\n      a.clear(), w.forEach((C) => a.add(C));\n    }\n    for (const w of t) {\n      let C = !1;\n      const O = Lt(w.css);\n      $t(O, {\n        visit: \"Function\",\n        enter(P) {\n          var j, D, H, J, xt, Ot, Ct;\n          const N = (j = this.rule) == null ? void 0 : j.prelude, $ = this.declaration, v = $ == null ? void 0 : $.property;\n          if ((N == null ? void 0 : N.children.isEmpty) === !1 && we(P) && $ && v && P.children.first && // Now we only want assignments to inset/sizing properties\n          (ue(v) || Qi(v))) {\n            const pt = P.children.first, wt = (D = Nt[pt.name]) != null ? D : [], B = u(pt.name);\n            if (!(wt.length || B.length))\n              return;\n            const fe = `${v}-${lt(12)}`;\n            if (B.length) {\n              const jt = /* @__PURE__ */ new Set([pt.name]);\n              for (; jt.size > 0; )\n                for (const Bt of jt) {\n                  const G = l[Bt];\n                  if ((H = G == null ? void 0 : G.names) != null && H.length && ((J = G == null ? void 0 : G.uuids) != null && J.length))\n                    for (const Wt of G.names)\n                      for (const Ut of G.uuids)\n                        It[Ut] = q(U({}, It[Ut]), {\n                          // - `key` (`propUuid`) is the property-specific\n                          //   uuid to append to the new custom property name\n                          // - `value` is the new property-specific custom\n                          //   property value to use\n                          [fe]: `${Wt}-${fe}`\n                        });\n                  jt.delete(Bt), (xt = G == null ? void 0 : G.names) != null && xt.length && G.names.forEach((Wt) => jt.add(Wt));\n                }\n            }\n            const mo = fn(N);\n            for (const jt of [...wt, ...B]) {\n              const Bt = U({}, jt), G = `--anchor-${lt(12)}-${v}`, Wt = Bt.uuid;\n              Bt.uuid = G;\n              for (const { selector: Ut } of mo)\n                n[Ut] = q(U({}, n[Ut]), {\n                  [v]: [...(Ct = (Ot = n[Ut]) == null ? void 0 : Ot[v]) != null ? Ct : [], Bt]\n                });\n              It[Wt] = q(U({}, It[Wt]), {\n                // - `key` (`propUuid`) is the property-specific\n                //   uuid to append to the new custom property name\n                // - `value` is the new property-specific custom\n                //   property value to use\n                [fe]: G\n              });\n            }\n            pt.name = `${pt.name}-${fe}`, C = !0;\n          }\n        }\n      }), C && (w.css = Z(O), w.changed = !0);\n    }\n    if (Object.keys(It).length > 0)\n      for (const w of t) {\n        let C = !1;\n        const O = Lt(w.css);\n        $t(O, {\n          visit: \"Function\",\n          enter(P) {\n            var N, $, v, j;\n            if (we(P) && (($ = (N = P.children.first) == null ? void 0 : N.name) != null && $.startsWith(\"--\")) && ((j = (v = this.declaration) == null ? void 0 : v.property) != null && j.startsWith(\"--\")) && this.block) {\n              const D = P.children.first, H = It[D.name];\n              if (H)\n                for (const [J, xt] of Object.entries(H))\n                  this.block.children.appendData({\n                    type: \"Declaration\",\n                    important: !1,\n                    property: `${this.declaration.property}-${J}`,\n                    value: {\n                      type: \"Raw\",\n                      value: Z(this.declaration.value).replace(\n                        `var(${D.name})`,\n                        `var(${xt})`\n                      )\n                    }\n                  }), C = !0;\n              ae[D.name] && (this.declaration.value = {\n                type: \"Raw\",\n                value: ae[D.name]\n              }, C = !0);\n            }\n          }\n        }), C && (w.css = Z(O), w.changed = !0);\n      }\n    const i = /* @__PURE__ */ new Map();\n    for (const [w, C] of Object.entries(n)) {\n      let O;\n      w.startsWith(\"[data-anchor-polyfill=\") && ((h = r[w]) != null && h.length) ? O = ie(\n        e.roots,\n        r[w].join(\",\")\n      ) : O = ie(e.roots, w);\n      for (const [P, N] of Object.entries(C))\n        for (const $ of N)\n          for (const v of O) {\n            const j = yield $s(v, $, {\n              roots: e.roots\n            }), D = `--anchor-${lt(12)}`;\n            i.set(v, q(U({}, (f = i.get(v)) != null ? f : {}), {\n              [$.uuid]: D\n            })), v.setAttribute(\n              \"style\",\n              `${$.uuid}: var(${D}); ${(p = v.getAttribute(\"style\")) != null ? p : \"\"}`\n            ), o[w] = q(U({}, o[w]), {\n              declarations: q(U({}, (d = o[w]) == null ? void 0 : d.declarations), {\n                [P]: [\n                  ...(y = (k = (m = o[w]) == null ? void 0 : m.declarations) == null ? void 0 : k[P]) != null ? y : [],\n                  q(U({}, $), { anchorEl: j, targetEl: v, uuid: D })\n                ]\n              })\n            });\n          }\n    }\n    const c = {\n      el: document.createElement(\"link\"),\n      changed: !1,\n      created: !0,\n      css: \"\"\n    };\n    t.push(c);\n    for (const [w, C] of Object.entries(s)) {\n      const O = ie(e.roots, w);\n      for (const P of O) {\n        const N = yield $s(P, null, {\n          roots: e.roots\n        });\n        for (const $ of C) {\n          const v = yield sp(\n            P,\n            $,\n            N\n          );\n          c.css += rp(\n            v.targetUUID,\n            $.selectorUUID\n          ), c.changed = !0, o[w] = q(U({}, o[w]), {\n            declarations: q(U({}, (x = o[w]) == null ? void 0 : x.declarations), {\n              \"position-area\": [\n                ...(et = (M = (A = o[w]) == null ? void 0 : A.declarations) == null ? void 0 : M[\"position-area\"]) != null ? et : [],\n                v\n              ]\n            })\n          });\n        }\n      }\n    }\n    return { rules: o, inlineStyles: i, anchorScopes: Et };\n  });\n}\nconst zp = [\n  \"as\",\n  \"blocking\",\n  \"crossorigin\",\n  // 'disabled' is not relevant for style elements, but this exclusion is\n  // theoretical, as a <link rel=stylesheet disabled> will not be loaded, and\n  // will not reach this part of the polyfill. See #246.\n  \"disabled\",\n  \"fetchpriority\",\n  \"href\",\n  \"hreflang\",\n  \"integrity\",\n  \"referrerpolicy\",\n  \"rel\",\n  \"type\"\n];\nfunction Ls(t, e, n = !1) {\n  const s = [];\n  for (const { el: r, css: o, changed: a, created: l = !1 } of t) {\n    const u = { el: r, css: o, changed: !1 };\n    if (a) {\n      if (r.tagName.toLowerCase() === \"style\")\n        r.innerHTML = o;\n      else if (r instanceof HTMLLinkElement) {\n        const i = document.createElement(\"style\");\n        i.textContent = o;\n        for (const c of r.getAttributeNames())\n          if (!c.startsWith(\"on\") && !zp.includes(c)) {\n            const h = r.getAttribute(c);\n            h !== null && i.setAttribute(c, h);\n          }\n        r.hasAttribute(\"href\") && i.setAttribute(\"data-original-href\", r.getAttribute(\"href\")), l ? (i.setAttribute(\"data-generated-by-polyfill\", \"true\"), document.head.insertAdjacentElement(\"beforeend\", i)) : (r.insertAdjacentElement(\"beforebegin\", i), r.remove()), u.el = i;\n      } else if (r.hasAttribute(\"data-has-inline-styles\")) {\n        const i = r.getAttribute(\"data-has-inline-styles\");\n        if (i) {\n          const c = `[data-has-inline-styles=\"${i}\"]{`;\n          let f = o.slice(c.length, 0 - \"}\".length);\n          const p = e == null ? void 0 : e.get(r);\n          if (p)\n            for (const [d, m] of Object.entries(p))\n              f = `${d}: var(${m}); ${f}`;\n          r.setAttribute(\"style\", f);\n        }\n      }\n    }\n    n && r.hasAttribute(\"data-has-inline-styles\") && r.removeAttribute(\"data-has-inline-styles\"), s.push(u);\n  }\n  return s;\n}\nconst Vp = q(U({}, V), { _c: /* @__PURE__ */ new Map() }), Hp = (t, e) => {\n  let n;\n  switch (t) {\n    case \"start\":\n    case \"self-start\":\n      n = 0;\n      break;\n    case \"end\":\n    case \"self-end\":\n      n = 100;\n      break;\n    default:\n      typeof t == \"number\" && !Number.isNaN(t) && (n = t);\n  }\n  if (n !== void 0)\n    return e ? 100 - n : n;\n}, Gp = (t, e) => {\n  let n;\n  switch (t) {\n    case \"block\":\n    case \"self-block\":\n      n = e ? \"width\" : \"height\";\n      break;\n    case \"inline\":\n    case \"self-inline\":\n      n = e ? \"height\" : \"width\";\n      break;\n  }\n  return n;\n}, Ps = (t) => {\n  switch (t) {\n    case \"top\":\n    case \"bottom\":\n      return \"y\";\n    case \"left\":\n    case \"right\":\n      return \"x\";\n  }\n  return null;\n}, qp = (t) => {\n  switch (t) {\n    case \"x\":\n      return \"width\";\n    case \"y\":\n      return \"height\";\n  }\n  return null;\n}, Os = (t) => ot(t, \"display\") === \"inline\", Rs = (t, e) => (e === \"x\" ? [\"border-left-width\", \"border-right-width\"] : [\"border-top-width\", \"border-bottom-width\"]).reduce(\n  (s, r) => s + parseInt(ot(t, r), 10),\n  0\n) || 0, Se = (t, e) => parseInt(ot(t, `margin-${e}`), 10) || 0, Kp = (t) => ({\n  top: Se(t, \"top\"),\n  right: Se(t, \"right\"),\n  bottom: Se(t, \"bottom\"),\n  left: Se(t, \"left\")\n}), en = (a) => R(null, [a], function* ({\n  targetEl: t,\n  targetProperty: e,\n  anchorRect: n,\n  anchorSide: s,\n  anchorSize: r,\n  fallback: o = null\n}) {\n  var l;\n  if (!((r || s !== void 0) && t && n))\n    return o;\n  if (r) {\n    if (!Ji(e))\n      return o;\n    let u;\n    switch (r) {\n      case \"width\":\n      case \"height\":\n        u = r;\n        break;\n      default: {\n        let i = !1;\n        const c = ot(t, \"writing-mode\");\n        i = c.startsWith(\"vertical-\") || c.startsWith(\"sideways-\"), u = Gp(r, i);\n      }\n    }\n    return u ? `${n[u]}px` : o;\n  }\n  if (s !== void 0) {\n    let u, i;\n    const c = Ps(e);\n    if (!(ue(e) && c && (!ue(s) || c === Ps(s))))\n      return o;\n    const h = [\"top\", \"left\"];\n    switch (s) {\n      case \"left\":\n      case \"top\":\n        u = 0;\n        break;\n      case \"right\":\n      case \"bottom\":\n        u = 100;\n        break;\n      case \"center\":\n        u = 50;\n        break;\n      case \"inside\":\n        u = h.includes(e) ? 0 : 100;\n        break;\n      case \"outside\":\n        u = h.includes(e) ? 100 : 0;\n        break;\n      default:\n        if (t) {\n          const d = (yield (l = V.isRTL) == null ? void 0 : l.call(V, t)) || !1;\n          u = Hp(s, d);\n        }\n    }\n    const f = typeof u == \"number\" && !Number.isNaN(u), p = qp(c);\n    if (f && p) {\n      (e === \"bottom\" || e === \"right\") && (i = yield vn(t));\n      let d = n[c] + n[p] * (u / 100);\n      switch (e) {\n        case \"bottom\": {\n          if (!i)\n            break;\n          let m = i.clientHeight;\n          if (m === 0 && Os(i)) {\n            const k = Rs(i, c);\n            m = i.offsetHeight - k;\n          }\n          d = m - d;\n          break;\n        }\n        case \"right\": {\n          if (!i)\n            break;\n          let m = i.clientWidth;\n          if (m === 0 && Os(i)) {\n            const k = Rs(i, c);\n            m = i.offsetWidth - k;\n          }\n          d = m - d;\n          break;\n        }\n      }\n      return `${d}px`;\n    }\n  }\n  return o;\n}), Qp = (t) => \"wrapperEl\" in t, Yp = (t) => \"uuid\" in t;\nfunction Xp(t, e = !1) {\n  return R(this, null, function* () {\n    const n = document.documentElement;\n    for (const [s, r] of Object.entries(t))\n      for (const o of r) {\n        const a = o.anchorEl, l = o.targetEl;\n        if (a && l)\n          if (Qp(o)) {\n            const u = o.wrapperEl, i = (c, h, f) => R(null, null, function* () {\n              return c === 0 ? \"0px\" : yield en({\n                targetEl: u,\n                targetProperty: h,\n                anchorRect: f,\n                anchorSide: c\n              });\n            });\n            rn(\n              a,\n              u,\n              () => R(null, null, function* () {\n                const c = ot(\n                  l,\n                  ao\n                );\n                u.setAttribute(lo, c);\n                const h = yield V.getElementRects({\n                  reference: a,\n                  floating: u,\n                  strategy: \"absolute\"\n                }), f = o.insets, p = yield i(\n                  f.block[0],\n                  \"top\",\n                  h.reference\n                ), d = yield i(\n                  f.block[1],\n                  \"bottom\",\n                  h.reference\n                ), m = yield i(\n                  f.inline[0],\n                  \"left\",\n                  h.reference\n                ), k = yield i(\n                  f.inline[1],\n                  \"right\",\n                  h.reference\n                );\n                n.style.setProperty(\n                  `${o.targetUUID}-top`,\n                  p || null\n                ), n.style.setProperty(\n                  `${o.targetUUID}-left`,\n                  m || null\n                ), n.style.setProperty(\n                  `${o.targetUUID}-right`,\n                  k || null\n                ), n.style.setProperty(\n                  `${o.targetUUID}-bottom`,\n                  d || null\n                ), n.style.setProperty(\n                  `${o.targetUUID}-justify-self`,\n                  o.alignments.inline\n                ), n.style.setProperty(\n                  `${o.targetUUID}-align-self`,\n                  o.alignments.block\n                );\n              }),\n              { animationFrame: e }\n            );\n          } else\n            rn(\n              a,\n              l,\n              () => R(null, null, function* () {\n                const u = yield V.getElementRects({\n                  reference: a,\n                  floating: l,\n                  strategy: \"absolute\"\n                }), i = yield en({\n                  targetEl: l,\n                  targetProperty: s,\n                  anchorRect: u.reference,\n                  anchorSide: o.anchorSide,\n                  anchorSize: o.anchorSize,\n                  fallback: o.fallbackValue\n                });\n                n.style.setProperty(o.uuid, i);\n              }),\n              { animationFrame: e }\n            );\n        else if (Yp(o)) {\n          const u = yield en({\n            targetProperty: s,\n            anchorSide: o.anchorSide,\n            anchorSize: o.anchorSize,\n            fallback: o.fallbackValue\n          });\n          n.style.setProperty(o.uuid, u);\n        }\n      }\n  });\n}\nfunction _s(t, e) {\n  return R(this, null, function* () {\n    const n = yield V.getElementRects({\n      reference: t,\n      floating: t,\n      strategy: \"absolute\"\n    });\n    return yield Yo(\n      {\n        x: t.offsetLeft,\n        y: t.offsetTop,\n        platform: Vp,\n        rects: n,\n        elements: {\n          floating: t,\n          reference: e\n        },\n        strategy: \"absolute\"\n      },\n      {\n        padding: Kp(t)\n      }\n    );\n  });\n}\nfunction Jp(t, e, n = !1) {\n  return R(this, null, function* () {\n    if (!e.length)\n      return;\n    const s = document.querySelectorAll(t);\n    for (const r of s) {\n      let o = !1;\n      const a = yield vn(r);\n      rn(\n        // We're just checking whether the target element overflows, so we don't\n        // care about the position of the anchor element in this case. Passing in\n        // an empty object instead of a reference element avoids unnecessarily\n        // watching for irrelevant changes.\n        {},\n        r,\n        () => R(null, null, function* () {\n          if (o)\n            return;\n          o = !0, r.removeAttribute(\"data-anchor-polyfill\");\n          const l = yield _s(r, a);\n          if (Object.values(l).every((u) => u <= 0)) {\n            r.removeAttribute(\"data-anchor-polyfill-last-successful\"), o = !1;\n            return;\n          }\n          for (const [u, { uuid: i }] of e.entries()) {\n            r.setAttribute(\"data-anchor-polyfill\", i);\n            const c = yield _s(r, a);\n            if (Object.values(c).every((h) => h <= 0)) {\n              r.setAttribute(\"data-anchor-polyfill-last-successful\", i), o = !1;\n              break;\n            }\n            if (u === e.length - 1) {\n              const h = r.getAttribute(\n                \"data-anchor-polyfill-last-successful\"\n              );\n              h ? r.setAttribute(\"data-anchor-polyfill\", h) : r.removeAttribute(\"data-anchor-polyfill\"), o = !1;\n              break;\n            }\n          }\n        }),\n        { animationFrame: n, layoutShift: !1 }\n      );\n    }\n  });\n}\nfunction Zp(t, e = !1) {\n  return R(this, null, function* () {\n    var n, s;\n    for (const r of Object.values(t))\n      yield Xp((n = r.declarations) != null ? n : {}, e);\n    for (const [r, o] of Object.entries(t))\n      yield Jp(\n        r,\n        (s = o.fallbacks) != null ? s : [],\n        e\n      );\n  });\n}\nfunction td(t = {}) {\n  const e = typeof t == \"boolean\" ? { useAnimationFrame: t } : t, n = e.useAnimationFrame === void 0 ? !!window.UPDATE_ANCHOR_ON_ANIMATION_FRAME : e.useAnimationFrame;\n  return Array.isArray(e.elements) || (e.elements = void 0), (!Array.isArray(e.roots) || e.roots.length === 0) && (e.roots = [document]), Object.assign(e, {\n    useAnimationFrame: n\n  });\n}\nfunction nd(t) {\n  return R(this, null, function* () {\n    const e = td(\n      t != null ? t : window.ANCHOR_POSITIONING_POLYFILL_OPTIONS\n    );\n    let n = yield Nf(e), s = {}, r;\n    Cf();\n    try {\n      Tf(n) && (n = Ls(n));\n      const a = yield Up(n, { roots: e.roots });\n      s = a.rules, r = a.inlineStyles;\n    } catch (o) {\n      throw xf(), o;\n    }\n    return Object.values(s).length && (Ls(n, r, !0), yield Zp(s, e.useAnimationFrame)), s;\n  });\n}\n\n//# sourceMappingURL=css-anchor-positioning-fn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@oddbird/css-anchor-positioning/dist/css-anchor-positioning-fn.js\n\n}");

/***/ })

}]);